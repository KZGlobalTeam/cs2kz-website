{
  "openapi": "3.0.3",
  "info": {
    "title": "CS2KZ API",
    "description": "This is the [OpenAPI] documentation for the CS2KZ API.\n\nThe source code is available on [GitHub].\n\n[OpenAPI]: https://www.openapis.org\n[RFC 9457]: https://www.rfc-editor.org/rfc/rfc9457.html\n[GitHub]: https://github.com/KZGlobalTeam/cs2kz-api",
    "contact": {
      "name": "AlphaKeks",
      "email": "alphakeks@dawn.sh"
    },
    "license": {
      "name": "Licensed under the GPL-3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0.html"
    },
    "version": "0.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "(͡ ͡° ͜ つ ͡͡°)",
        "operationId": "healthcheck",
        "responses": {
          "200": {
            "description": "The API is healthy.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/players": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "get_players",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum amount of players to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "default": 100,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching potentially many players.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching potentially many players.",
                  "required": [
                    "players",
                    "total"
                  ],
                  "properties": {
                    "players": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchPlayerResponse"
                      },
                      "description": "The player data for this request."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many players **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "post": {
        "tags": [
          "Players"
        ],
        "operationId": "register_player",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPlayerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for registering a new player.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for registering a new player.",
                  "required": [
                    "player_id"
                  ],
                  "properties": {
                    "player_id": {
                      "$ref": "#/components/schemas/SteamID"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/players/{player}": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "get_player",
        "parameters": [
          {
            "name": "player",
            "in": "path",
            "description": "a player's SteamID or name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching a player.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PlayerInfo"
                    },
                    {
                      "type": "object",
                      "required": [
                        "is_banned"
                      ],
                      "properties": {
                        "is_banned": {
                          "type": "boolean",
                          "description": "Whether the player is currently banned."
                        },
                        "ip_address": {
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/IpAddr"
                            }
                          ],
                          "nullable": true
                        }
                      }
                    }
                  ],
                  "description": "Response payload for fetching a player."
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/players/{player_id}": {
      "patch": {
        "tags": [
          "Players"
        ],
        "operationId": "update_player",
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "description": "a player's SteamID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SteamID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for updating an existing player.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for updating an existing player.",
                  "required": [
                    "session_id",
                    "course_session_ids"
                  ],
                  "properties": {
                    "session_id": {
                      "$ref": "#/components/schemas/SessionID"
                    },
                    "course_session_ids": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CourseSessionID"
                      },
                      "description": "The IDs of the created course sessions."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/players/{player}/preferences": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "get_preferences",
        "parameters": [
          {
            "name": "player",
            "in": "path",
            "description": "a player's SteamID or name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching a player's in-game preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching a player's in-game preferences.",
                  "required": [
                    "preferences"
                  ],
                  "properties": {
                    "preferences": {
                      "description": "The player's preferences."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/players/{player_id}/steam": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "get_steam_profile",
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "description": "a player's SteamID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SteamID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching a player's Steam profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A Steam user.",
                  "required": [
                    "steam_id",
                    "steam_id64",
                    "username",
                    "profile_url",
                    "avatar_url"
                  ],
                  "properties": {
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "steam_id64": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "username": {
                      "type": "string",
                      "description": "The user's username."
                    },
                    "realname": {
                      "type": "string",
                      "description": "The user's realname.",
                      "nullable": true
                    },
                    "country": {
                      "type": "string",
                      "description": "The user's country.",
                      "nullable": true
                    },
                    "profile_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to the user's Steam profile."
                    },
                    "avatar_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to the user's Steam avatar."
                    }
                  },
                  "example": {
                    "avatar_url": "https://avatars.steamstatic.com/da7587d32ed9cd619be8ecec623ce68a1a0afd63.jpg",
                    "country": "DE",
                    "profile_url": "https://steamcommunity.com/id/AlphaKeks/",
                    "realname": "STEAM_1:1:161178172",
                    "steam_id": "STEAM_1:1:161178172",
                    "steam_id64": "76561198282622073",
                    "username": "AlphaKeks"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/maps": {
      "get": {
        "tags": [
          "Maps"
        ],
        "operationId": "get_maps",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "workshop_id",
            "in": "query",
            "description": "Filter by workshop ID.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkshopID"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "global_status",
            "in": "query",
            "description": "Filter by global status.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GlobalStatus"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Only include maps approved after this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Only include maps approved before this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching maps.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching maps.",
                  "required": [
                    "maps",
                    "total"
                  ],
                  "properties": {
                    "maps": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchMapResponse"
                      },
                      "description": "The maps."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many maps **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "operationId": "submit_map",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitMapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for submitting a new map.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for submitting a new map.",
                  "required": [
                    "map_id",
                    "courses"
                  ],
                  "properties": {
                    "map_id": {
                      "$ref": "#/components/schemas/MapID"
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CreatedCourse"
                      },
                      "description": "IDs related to the created courses."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/maps/{map}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "operationId": "get_map",
        "parameters": [
          {
            "name": "map",
            "in": "path",
            "description": "a map's ID or name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MapIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching a map.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching a map.",
                  "required": [
                    "id",
                    "name",
                    "global_status",
                    "workshop_id",
                    "checksum",
                    "mappers",
                    "courses",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/MapID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the map.",
                      "nullable": true
                    },
                    "global_status": {
                      "$ref": "#/components/schemas/GlobalStatus"
                    },
                    "workshop_id": {
                      "$ref": "#/components/schemas/WorkshopID"
                    },
                    "checksum": {
                      "$ref": "#/components/schemas/Checksum"
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PlayerInfo"
                      },
                      "description": "Players who contributed to the creation of this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "The map's courses."
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this map was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/maps/{map_id}": {
      "patch": {
        "tags": [
          "Maps"
        ],
        "operationId": "update_map",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "description": "a map's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MapID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMapRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response payload for updating an existing map.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for updating an existing map.",
                  "required": [
                    "updated_courses"
                  ],
                  "properties": {
                    "updated_courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UpdatedCourse"
                      },
                      "description": "A list of courses that were updated."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "maps"
            ]
          }
        ]
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "Servers"
        ],
        "operationId": "get_servers",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by server name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "Filter by server host.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Host"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "owned_by",
            "in": "query",
            "description": "Filter by server owner.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter by approval date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter by approval date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum amount of servers to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "default": 50,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching information about servers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching information about servers.",
                  "required": [
                    "servers",
                    "total"
                  ],
                  "properties": {
                    "servers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchServerResponse"
                      },
                      "description": "The servers."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many servers **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "post": {
        "tags": [
          "Servers"
        ],
        "operationId": "register_server",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for registering a new server.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for registering a new server.",
                  "required": [
                    "server_id",
                    "api_key"
                  ],
                  "properties": {
                    "server_id": {
                      "$ref": "#/components/schemas/ServerID"
                    },
                    "api_key": {
                      "$ref": "#/components/schemas/ApiKey"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser serssion": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/auth": {
      "post": {
        "tags": [
          "Servers"
        ],
        "operationId": "generate_access_token",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAccessTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for generating a temporary access token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for generating a temporary access token.",
                  "required": [
                    "token"
                  ],
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The token."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/servers/{server}": {
      "get": {
        "tags": [
          "Servers"
        ],
        "operationId": "get_server",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "a server's ID or name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching information about a server.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching information about a server.",
                  "required": [
                    "id",
                    "name",
                    "host",
                    "port",
                    "owner",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/ServerID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The server's name."
                    },
                    "host": {
                      "$ref": "#/components/schemas/Host"
                    },
                    "port": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's port.",
                      "minimum": 0
                    },
                    "owner": {
                      "$ref": "#/components/schemas/ServerOwner"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this server was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/servers/{server_id}": {
      "patch": {
        "tags": [
          "Servers"
        ],
        "operationId": "update_server",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "a server's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServerRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/{server_id}/key": {
      "put": {
        "tags": [
          "Servers"
        ],
        "operationId": "reset_api_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "a server's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerID"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Response payload for resetting a server's API key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for resetting a server's API key.",
                  "required": [
                    "key"
                  ],
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/ApiKey"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "servers"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Servers"
        ],
        "operationId": "delete_api_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "a server's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/records": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "get_records",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "description": "Filter by mode.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Mode"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "styles",
            "in": "query",
            "description": "Filter by styles.\n\nThis is not an exact match; results will contain records that\n**include** these styles, but may also have more.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Styles"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "has_teleports",
            "in": "query",
            "description": "Filter by whether records have teleports or not.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "course",
            "in": "query",
            "description": "Filter by course.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CourseIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "Filter by map.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MapIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "Only include top records.\n\nThat is, only include the fastest time per player per filter.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "description": "In which order to sort the results.\n\nThis will have different defaults depending on `sort_by`, but if this\nfield is specified, the order is forced.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Which property to sort the results after.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortRecordsBy"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Only include records submitted after this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Only include records submitted before this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum amount of records to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "default": 100,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching records.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching records.",
                  "required": [
                    "records",
                    "total"
                  ],
                  "properties": {
                    "records": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchRecordResponse"
                      },
                      "description": "The records."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many records **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "submit_record",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitRecordRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for submitting a new record.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for submitting a new record.",
                  "required": [
                    "record_id"
                  ],
                  "properties": {
                    "record_id": {
                      "$ref": "#/components/schemas/RecordID"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/records/{record_id}": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "get_record",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "description": "a record ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RecordID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching a record.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching a record.",
                  "required": [
                    "id",
                    "mode",
                    "styles",
                    "teleports",
                    "time",
                    "course",
                    "player",
                    "server",
                    "bhop_stats",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RecordID"
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "styles": {
                      "$ref": "#/components/schemas/Styles"
                    },
                    "teleports": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The amount of teleports used when setting this record.",
                      "minimum": 0
                    },
                    "time": {
                      "$ref": "#/components/schemas/Seconds"
                    },
                    "course": {
                      "$ref": "#/components/schemas/CourseInfo"
                    },
                    "player": {
                      "$ref": "#/components/schemas/PlayerInfo"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerInfo"
                    },
                    "bhop_stats": {
                      "$ref": "#/components/schemas/BhopStats"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this record was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "patch": {
        "tags": [
          "Records"
        ],
        "operationId": "update_record",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "description": "a record ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RecordID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecordRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "records"
            ]
          }
        ]
      }
    },
    "/records/{record_id}/replay": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "get_replay",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "description": "a record ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RecordID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          },
          "503": {
            "description": "Response payload for fetching a record's replay.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching a record's replay.",
                  "required": [
                    "_priv"
                  ],
                  "properties": {
                    "_priv": {
                      "default": null,
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jumpstats": {
      "get": {
        "tags": [
          "Jumpstats"
        ],
        "summary": "Fetch many jumpstats.",
        "operationId": "get_jumpstats",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Filter by jump type.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/JumpType"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Filter by mode.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Mode"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "minimum_distance",
            "in": "query",
            "description": "Filter by required minimum distance.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            }
          },
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Only include jumpstats submitted after this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Only include jumpstats submitted before this date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "default": 100,
              "maximum": 1000,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching jumpstats.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching jumpstats.",
                  "required": [
                    "jumpstats",
                    "total"
                  ],
                  "properties": {
                    "jumpstats": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchJumpstatResponse"
                      },
                      "description": "The jumpstats."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many jumpstats **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "post": {
        "tags": [
          "Jumpstats"
        ],
        "operationId": "submit_jumpstat",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitJumpstatRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for submitting a new jumpstat.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for submitting a new jumpstat.",
                  "required": [
                    "jumpstat_id"
                  ],
                  "properties": {
                    "jumpstat_id": {
                      "$ref": "#/components/schemas/JumpstatID"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/jumpstats/{jumpstat_id}": {
      "get": {
        "tags": [
          "Jumpstats"
        ],
        "summary": "Fetch a jumpstat by its ID.",
        "operationId": "get_jumpstat",
        "parameters": [
          {
            "name": "jumpstat_id",
            "in": "path",
            "description": "a jumpstat's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/JumpstatID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching a jumpstat.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching a jumpstat.",
                  "required": [
                    "id",
                    "type",
                    "mode",
                    "player",
                    "server",
                    "strafes",
                    "distance",
                    "sync",
                    "pre",
                    "max",
                    "overlap",
                    "bad_angles",
                    "dead_air",
                    "height",
                    "airpath",
                    "deviation",
                    "average_width",
                    "airtime",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/JumpstatID"
                    },
                    "type": {
                      "$ref": "#/components/schemas/JumpType"
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "player": {
                      "$ref": "#/components/schemas/PlayerInfo"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerInfo"
                    },
                    "strafes": {
                      "type": "integer",
                      "format": "uint8",
                      "description": "How many strafes the player performed during the jump.",
                      "minimum": 0
                    },
                    "distance": {
                      "type": "number",
                      "format": "float",
                      "description": "The distance cleared by the jump."
                    },
                    "sync": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of airtime spent gaining speed."
                    },
                    "pre": {
                      "type": "number",
                      "format": "float",
                      "description": "The speed at jumpoff."
                    },
                    "max": {
                      "type": "number",
                      "format": "float",
                      "description": "The maximum speed during the jump."
                    },
                    "overlap": {
                      "$ref": "#/components/schemas/Seconds"
                    },
                    "bad_angles": {
                      "$ref": "#/components/schemas/Seconds"
                    },
                    "dead_air": {
                      "$ref": "#/components/schemas/Seconds"
                    },
                    "height": {
                      "type": "number",
                      "format": "float",
                      "description": "The maximum height reached during the jump."
                    },
                    "airpath": {
                      "type": "number",
                      "format": "float",
                      "description": "How close to a perfect airpath this jump was.\n\nThe closer to 1.0 the better."
                    },
                    "deviation": {
                      "type": "number",
                      "format": "float",
                      "description": "How far the landing position deviates from the jumpoff position."
                    },
                    "average_width": {
                      "type": "number",
                      "format": "float",
                      "description": "The average strafe width."
                    },
                    "airtime": {
                      "$ref": "#/components/schemas/Seconds"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this jumpstat was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/bans": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Fetch many bans.",
        "operationId": "get_bans",
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Filter by ban reason.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BanReason"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "unbanned",
            "in": "query",
            "description": "Only include bans that have (not) already expired / have been reverted.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "banned_by",
            "in": "query",
            "description": "Filter by admin who created the ban.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "unbanned_by",
            "in": "query",
            "description": "Filter by admin who created the unban.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum amount of bans to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "default": 100,
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching bans.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching bans.",
                  "required": [
                    "bans",
                    "total"
                  ],
                  "properties": {
                    "bans": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchBanResponse"
                      },
                      "description": "The bans."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many bans **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "post": {
        "tags": [
          "Bans"
        ],
        "summary": "Ban a player.",
        "operationId": "submit_ban",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for banning a player.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for banning a player.",
                  "required": [
                    "ban_id"
                  ],
                  "properties": {
                    "ban_id": {
                      "$ref": "#/components/schemas/BanID"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "CS2 Server": []
          },
          {
            "Browser Session": [
              "bans"
            ]
          }
        ]
      }
    },
    "/bans/{ban_id}": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Fetch a specific ban by its ID.",
        "operationId": "get_ban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "a ban's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BanID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching a ban.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching a ban.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/BanID"
                    },
                    "player": {
                      "$ref": "#/components/schemas/PlayerInfo"
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ServerInfo"
                        }
                      ],
                      "nullable": true
                    },
                    "admin": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/PlayerInfo"
                        }
                      ],
                      "nullable": true
                    },
                    "reason": {
                      "$ref": "#/components/schemas/BanReason"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was created."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.\n\nThis is `null` for permanent bans.",
                      "nullable": true
                    },
                    "unban": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Unban"
                        }
                      ],
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "patch": {
        "tags": [
          "Bans"
        ],
        "summary": "Update a ban.",
        "operationId": "update_ban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "a ban's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BanID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBanRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "bans"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Bans"
        ],
        "summary": "Unban a player.",
        "operationId": "revert_ban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "a ban's ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BanID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbanRequestPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for reverting a ban.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for reverting a ban.",
                  "required": [
                    "unban_id"
                  ],
                  "properties": {
                    "unban_id": {
                      "$ref": "#/components/schemas/UnbanID"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "bans"
            ]
          }
        ]
      }
    },
    "/admins": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Fetch many bans.",
        "operationId": "get_admins",
        "parameters": [
          {
            "name": "required_permissions",
            "in": "query",
            "description": "Only include admins with these permissions.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum amount of admins to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching many admins.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching many admins.",
                  "required": [
                    "admins",
                    "total"
                  ],
                  "properties": {
                    "admins": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchAdminResponse"
                      },
                      "description": "The admins."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many admins **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/admins/{admin_id}": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Fetch a specific ban by its ID.",
        "operationId": "get_admin",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "description": "an admin's SteamID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SteamID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching an admin.",
                  "required": [
                    "name",
                    "steam_id",
                    "permissions"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The admin's name."
                    },
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "permissions": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "put": {
        "tags": [
          "Admins"
        ],
        "summary": "Set a user's permissions.",
        "operationId": "update_admin",
        "parameters": [
          {
            "name": "admin_id",
            "in": "path",
            "description": "an admin's SteamID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SteamID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPermissionsPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "Browser Session": [
              "admin"
            ]
          }
        ]
      }
    },
    "/plugin/versions": {
      "get": {
        "tags": [
          "Plugin"
        ],
        "operationId": "get_versions",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum amount of versions to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "default": 50,
              "maximum": 1000,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response payload for fetching plugin versions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for fetching plugin versions.",
                  "required": [
                    "versions",
                    "total"
                  ],
                  "properties": {
                    "versions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FetchPluginVersionResponse"
                      },
                      "description": "The versions."
                    },
                    "total": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "How many versions **could have been** fetched, if there was no limit.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "post": {
        "tags": [
          "Plugin"
        ],
        "operationId": "submit_version",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitPluginVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response payload for submitting a new plugin version.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "a relative uri to fetch the created resource"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for submitting a new plugin version.",
                  "required": [
                    "plugin_version_id"
                  ],
                  "properties": {
                    "plugin_version_id": {
                      "$ref": "#/components/schemas/PluginVersionID"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        },
        "security": [
          {
            "API Key": []
          }
        ]
      }
    },
    "/plugin/versions/{version}": {
      "get": {
        "tags": [
          "Plugin"
        ],
        "operationId": "get_version",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "description": "a plugin version identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request payload for fetching a plugin version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Request payload for fetching a plugin version.",
                  "required": [
                    "id",
                    "semver",
                    "git_revision",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/PluginVersionID"
                    },
                    "semver": {
                      "$ref": "#/components/schemas/PluginVersion"
                    },
                    "git_revision": {
                      "type": "string",
                      "description": "The git revision associated with this version."
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this version was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Login with Steam.",
        "operationId": "login",
        "parameters": [
          {
            "name": "redirect_to",
            "in": "query",
            "description": "URL to redirect to after the login process is complete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Response payload for logging in with Steam.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Steam's OpenID service"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response payload for logging in with Steam.",
                  "required": [
                    "openid_url"
                  ],
                  "properties": {
                    "openid_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "OpenID URL to redirect the user to so they can login."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Invalidate your existing session(s).",
        "operationId": "logout",
        "parameters": [
          {
            "name": "invalidate_all_sessions",
            "in": "query",
            "description": "Whether to invalidate all previous sessions, rather than just the\ncurrent one.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {
              "Set-Cookies": {
                "schema": {
                  "type": "string"
                },
                "description": "your cleared `kz-*` cookies"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/auth/verify-session": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify whether a session token is still valid.",
        "description": "This endpoint will return a status in the 4xx range if you do not have a\nvalid session token, and a `200 OK` if you do.",
        "operationId": "verify_session",
        "responses": {}
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKey": {
        "type": "string",
        "format": "uuid",
        "description": "An API key for CS2 servers."
      },
      "BanID": {
        "type": "integer",
        "format": "uint64",
        "description": "An ID uniquely identifying a ban.",
        "minimum": 0
      },
      "BanReason": {
        "type": "string",
        "description": "Reasons for which players can get banned.",
        "enum": [
          "auto_bhop",
          "auto_strafe",
          "macro"
        ]
      },
      "BanRequestPayload": {
        "type": "object",
        "title": "BanRequest",
        "required": [
          "player_id",
          "reason"
        ],
        "properties": {
          "player_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "player_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IpAddr"
              }
            ],
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          }
        }
      },
      "BhopStats": {
        "type": "object",
        "description": "Statistics about bhop distribution during e.g. an in-game session.",
        "required": [
          "total",
          "perfs",
          "perfect_perfs"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "uint32",
            "description": "The total count.\n\nThis includes `perfs` and `perfect_perfs`.",
            "minimum": 0
          },
          "perfs": {
            "type": "integer",
            "format": "uint32",
            "description": "The \"perf\" count.\n\nA \"perf\" is whatever the current [mode] considers to be a \"perfect\"\nbhop. This does **not** mean \"tick-perfect\"! That's what\n`perfect_perfs` is for.\n\n[mode]: cs2kz::Mode",
            "minimum": 0
          },
          "perfect_perfs": {
            "type": "integer",
            "format": "uint32",
            "description": "The tick-perfect-bhop count.",
            "minimum": 0
          }
        }
      },
      "Checksum": {
        "type": "string",
        "description": "A map file's checksum.\n\nCurrently this uses the MD5 hashing algorithm."
      },
      "Course": {
        "type": "object",
        "description": "A KZ map course.",
        "required": [
          "id",
          "name",
          "mappers",
          "filters"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CourseID"
          },
          "name": {
            "type": "string",
            "description": "The course's name."
          },
          "description": {
            "type": "string",
            "description": "Description of the course.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerInfo"
            },
            "description": "Players who contributed to the creation of this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "The course's filters."
          }
        }
      },
      "CourseID": {
        "type": "integer",
        "format": "uint16",
        "description": "A unique identifier for a KZ map course.",
        "minimum": 0
      },
      "CourseIdentifier": {
        "oneOf": [
          {
            "type": "string",
            "title": "Name"
          },
          {
            "type": "integer",
            "title": "ID"
          }
        ],
        "description": "A course's ID or name"
      },
      "CourseInfo": {
        "type": "object",
        "description": "Information about a course a record was performed on.",
        "required": [
          "id",
          "name",
          "map_id",
          "map_name",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CourseID"
          },
          "name": {
            "type": "string",
            "description": "The course's name."
          },
          "map_id": {
            "$ref": "#/components/schemas/MapID"
          },
          "map_name": {
            "type": "string",
            "description": "The name of the map the course belongs to."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          }
        }
      },
      "CourseSession": {
        "type": "object",
        "description": "An in-game session on a specific course in a specific mode.\n\nThis contains data for both VNL and CKZ, which you can iterate over:\n\n```no_run\nuse cs2kz_api::services::players::CourseSession;\n\nlet session: CourseSession = todo!();\n\nfor (mode, data) in &session {\n// ...\n}\n```",
        "properties": {
          "vanilla": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CourseSessionData"
              }
            ],
            "nullable": true
          },
          "classic": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CourseSessionData"
              }
            ],
            "nullable": true
          }
        }
      },
      "CourseSessionData": {
        "type": "object",
        "description": "The raw data for an in-game session on a specific course.",
        "required": [
          "playtime",
          "started_runs",
          "finished_runs",
          "bhop_stats"
        ],
        "properties": {
          "playtime": {
            "$ref": "#/components/schemas/Seconds"
          },
          "started_runs": {
            "type": "integer",
            "format": "uint16",
            "description": "How many times the player left the start zone of this course.",
            "minimum": 0
          },
          "finished_runs": {
            "type": "integer",
            "format": "uint16",
            "description": "How many times the player entered the end zone of this course.",
            "minimum": 0
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          }
        }
      },
      "CourseSessionID": {
        "type": "integer",
        "format": "uint64",
        "description": "An ID uniquely identifying an in-game per-course session.",
        "minimum": 0
      },
      "CourseUpdate": {
        "type": "object",
        "description": "An update to a map course.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A new name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A new description.",
            "nullable": true
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of SteamIDs of players to add as mappers to this course.",
            "uniqueItems": true,
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of SteamIDs of players to remove as mappers from this course.",
            "uniqueItems": true,
            "nullable": true
          },
          "filter_updates": {
            "type": "object",
            "description": "Updates to this course's filters.",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterUpdate"
            },
            "nullable": true
          }
        }
      },
      "CreatedCourse": {
        "type": "object",
        "description": "Response payload for created courses when submitting a new map.",
        "required": [
          "id",
          "filter_ids"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CourseID"
          },
          "filter_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterID"
            },
            "description": "The IDS of the course's filters."
          }
        }
      },
      "DeleteKeyRequest": {
        "type": "object",
        "description": "Request payload for deleting a server's API key.",
        "required": [
          "server_id"
        ],
        "properties": {
          "server_id": {
            "$ref": "#/components/schemas/ServerID"
          }
        }
      },
      "FetchAdminResponse": {
        "type": "object",
        "description": "Response payload for fetching an admin.",
        "required": [
          "name",
          "steam_id",
          "permissions"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The admin's name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        }
      },
      "FetchBanResponse": {
        "type": "object",
        "description": "Response payload for fetching a ban.",
        "required": [
          "id",
          "player",
          "reason",
          "created_on"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/BanID"
          },
          "player": {
            "$ref": "#/components/schemas/PlayerInfo"
          },
          "server": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerInfo"
              }
            ],
            "nullable": true
          },
          "admin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerInfo"
              }
            ],
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban was created."
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban will expire.\n\nThis is `null` for permanent bans.",
            "nullable": true
          },
          "unban": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Unban"
              }
            ],
            "nullable": true
          }
        }
      },
      "FetchJumpstatResponse": {
        "type": "object",
        "description": "Response payload for fetching a jumpstat.",
        "required": [
          "id",
          "type",
          "mode",
          "player",
          "server",
          "strafes",
          "distance",
          "sync",
          "pre",
          "max",
          "overlap",
          "bad_angles",
          "dead_air",
          "height",
          "airpath",
          "deviation",
          "average_width",
          "airtime",
          "created_on"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JumpstatID"
          },
          "type": {
            "$ref": "#/components/schemas/JumpType"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "player": {
            "$ref": "#/components/schemas/PlayerInfo"
          },
          "server": {
            "$ref": "#/components/schemas/ServerInfo"
          },
          "strafes": {
            "type": "integer",
            "format": "uint8",
            "description": "How many strafes the player performed during the jump.",
            "minimum": 0
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "The distance cleared by the jump."
          },
          "sync": {
            "type": "number",
            "format": "float",
            "description": "The % of airtime spent gaining speed."
          },
          "pre": {
            "type": "number",
            "format": "float",
            "description": "The speed at jumpoff."
          },
          "max": {
            "type": "number",
            "format": "float",
            "description": "The maximum speed during the jump."
          },
          "overlap": {
            "$ref": "#/components/schemas/Seconds"
          },
          "bad_angles": {
            "$ref": "#/components/schemas/Seconds"
          },
          "dead_air": {
            "$ref": "#/components/schemas/Seconds"
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "The maximum height reached during the jump."
          },
          "airpath": {
            "type": "number",
            "format": "float",
            "description": "How close to a perfect airpath this jump was.\n\nThe closer to 1.0 the better."
          },
          "deviation": {
            "type": "number",
            "format": "float",
            "description": "How far the landing position deviates from the jumpoff position."
          },
          "average_width": {
            "type": "number",
            "format": "float",
            "description": "The average strafe width."
          },
          "airtime": {
            "$ref": "#/components/schemas/Seconds"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this jumpstat was submitted."
          }
        }
      },
      "FetchMapResponse": {
        "type": "object",
        "description": "Response payload for fetching a map.",
        "required": [
          "id",
          "name",
          "global_status",
          "workshop_id",
          "checksum",
          "mappers",
          "courses",
          "created_on"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MapID"
          },
          "name": {
            "type": "string",
            "description": "The map's name."
          },
          "description": {
            "type": "string",
            "description": "Description of the map.",
            "nullable": true
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "workshop_id": {
            "$ref": "#/components/schemas/WorkshopID"
          },
          "checksum": {
            "$ref": "#/components/schemas/Checksum"
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerInfo"
            },
            "description": "Players who contributed to the creation of this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Course"
            },
            "description": "The map's courses."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this map was approved."
          }
        }
      },
      "FetchPlayerResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PlayerInfo"
          },
          {
            "type": "object",
            "required": [
              "is_banned"
            ],
            "properties": {
              "is_banned": {
                "type": "boolean",
                "description": "Whether the player is currently banned."
              },
              "ip_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IpAddr"
                  }
                ],
                "nullable": true
              }
            }
          }
        ],
        "description": "Response payload for fetching a player."
      },
      "FetchPluginVersionResponse": {
        "type": "object",
        "description": "Request payload for fetching a plugin version.",
        "required": [
          "id",
          "semver",
          "git_revision",
          "created_on"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PluginVersionID"
          },
          "semver": {
            "$ref": "#/components/schemas/PluginVersion"
          },
          "git_revision": {
            "type": "string",
            "description": "The git revision associated with this version."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this version was submitted."
          }
        }
      },
      "FetchRecordResponse": {
        "type": "object",
        "description": "Response payload for fetching a record.",
        "required": [
          "id",
          "mode",
          "styles",
          "teleports",
          "time",
          "course",
          "player",
          "server",
          "bhop_stats",
          "created_on"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/RecordID"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "styles": {
            "$ref": "#/components/schemas/Styles"
          },
          "teleports": {
            "type": "integer",
            "format": "uint32",
            "description": "The amount of teleports used when setting this record.",
            "minimum": 0
          },
          "time": {
            "$ref": "#/components/schemas/Seconds"
          },
          "course": {
            "$ref": "#/components/schemas/CourseInfo"
          },
          "player": {
            "$ref": "#/components/schemas/PlayerInfo"
          },
          "server": {
            "$ref": "#/components/schemas/ServerInfo"
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this record was submitted."
          }
        }
      },
      "FetchServerResponse": {
        "type": "object",
        "description": "Response payload for fetching information about a server.",
        "required": [
          "id",
          "name",
          "host",
          "port",
          "owner",
          "created_on"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ServerID"
          },
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "host": {
            "$ref": "#/components/schemas/Host"
          },
          "port": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's port.",
            "minimum": 0
          },
          "owner": {
            "$ref": "#/components/schemas/ServerOwner"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this server was approved."
          }
        }
      },
      "Filter": {
        "type": "object",
        "description": "A KZ map course filter.",
        "required": [
          "id",
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/FilterID"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter is for teleport runs."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Any additional notes.",
            "nullable": true
          }
        }
      },
      "FilterID": {
        "type": "integer",
        "format": "uint16",
        "description": "A unique identifier for a KZ map course filter.",
        "minimum": 0
      },
      "FilterUpdate": {
        "type": "object",
        "description": "An update to a course filter.",
        "properties": {
          "tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tier"
              }
            ],
            "nullable": true
          },
          "ranked_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RankedStatus"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "New notes.",
            "nullable": true
          }
        }
      },
      "GenerateAccessTokenRequest": {
        "type": "object",
        "description": "Request payload for generating a temporary access token.",
        "required": [
          "key",
          "plugin_version"
        ],
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ApiKey"
          },
          "plugin_version": {
            "$ref": "#/components/schemas/PluginVersion"
          }
        }
      },
      "GlobalStatus": {
        "type": "string",
        "title": "Name",
        "enum": [
          "not_global",
          "in_testing",
          "global"
        ],
        "example": "global"
      },
      "Host": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/IpAddr"
          },
          {
            "type": "string",
            "title": "Domain",
            "description": "A domain."
          }
        ],
        "description": "A CS2 server host."
      },
      "IpAddr": {
        "type": "string",
        "description": "A wrapper around [`std::net::Ipv6Addr`] that correctly takes care of mapped\nIPv4 addresses when encoding/decoding."
      },
      "JumpType": {
        "type": "string",
        "title": "Name",
        "enum": [
          "longjump",
          "single_bhop",
          "multi_bhop",
          "weirdjump",
          "ladderjump",
          "ladderhop"
        ],
        "example": "longjump"
      },
      "JumpstatID": {
        "type": "integer",
        "format": "uint64",
        "description": "An ID uniquely identifying an jumpstat.",
        "minimum": 0
      },
      "MapID": {
        "type": "integer",
        "format": "uint16",
        "description": "A unique identifier for a KZ map.",
        "minimum": 0
      },
      "MapIdentifier": {
        "oneOf": [
          {
            "type": "string",
            "title": "Name"
          },
          {
            "type": "integer",
            "title": "ID"
          }
        ],
        "description": "A map's ID or name"
      },
      "Mode": {
        "type": "string",
        "title": "Name",
        "enum": [
          "vanilla",
          "classic"
        ],
        "example": "classic"
      },
      "NewCourse": {
        "type": "object",
        "description": "Request payload for a course when submitting a new map.",
        "required": [
          "mappers",
          "filters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the course.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of SteamIDs of the players who contributed to the creation of this\ncourse.",
            "uniqueItems": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewFilter"
            },
            "description": "The course's filters."
          }
        },
        "example": {
          "description": "the main course!",
          "filters": [
            {
              "mode": "vanilla",
              "notes": "gotta hit the funny jump :tf:",
              "ranked_status": "ranked",
              "teleports": true,
              "tier": "hard"
            },
            {
              "mode": "vanilla",
              "ranked_status": "ranked",
              "teleports": false,
              "tier": "very_hard"
            },
            {
              "mode": "classic",
              "ranked_status": "ranked",
              "teleports": true,
              "tier": "easy"
            },
            {
              "mode": "classic",
              "ranked_status": "ranked",
              "teleports": false,
              "tier": "medium"
            }
          ],
          "mappers": [
            "76561198165203332"
          ],
          "name": "Main"
        }
      },
      "NewFilter": {
        "type": "object",
        "description": "Request payload for a course filter when submitting a new map.",
        "required": [
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter is for teleport runs."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Any additional notes.",
            "nullable": true
          }
        },
        "example": {
          "mode": "vanilla",
          "notes": "gotta hit the funny jump :tf:",
          "ranked_status": "ranked",
          "teleports": true,
          "tier": "hard"
        }
      },
      "Permissions": {
        "type": "array",
        "items": {
          "type": "string",
          "title": "Name",
          "enum": [
            "bans",
            "records",
            "servers",
            "maps",
            "admin"
          ],
          "example": "maps"
        }
      },
      "PlayerIdentifier": {
        "oneOf": [
          {
            "type": "string",
            "title": "Name"
          },
          {
            "oneOf": [
              {
                "type": "string",
                "title": "SteamID",
                "example": "STEAM_1:1:161178172",
                "pattern": "^STEAM_[0|1]:[0|1]:\\d+$"
              },
              {
                "type": "integer",
                "title": "SteamID64",
                "format": "uint64",
                "example": "76561198282622073",
                "maximum": 76561202255233024,
                "minimum": 76561197960265728
              },
              {
                "type": "integer",
                "title": "SteamID32",
                "format": "uint32",
                "example": "322356345",
                "maximum": 4294967295,
                "minimum": 1
              }
            ],
            "description": "a player's SteamID",
            "example": "STEAM_1:1:161178172"
          }
        ],
        "description": "A SteamID or name"
      },
      "PlayerInfo": {
        "type": "object",
        "description": "Basic information about a player.",
        "required": [
          "name",
          "steam_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The player's name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          }
        }
      },
      "PluginVersion": {
        "type": "string",
        "description": "A CS2KZ plugin version.",
        "example": "0.0.1"
      },
      "PluginVersionID": {
        "type": "integer",
        "format": "uint16",
        "description": "A unique identifier for CS2KZ versions.",
        "minimum": 0
      },
      "RankedStatus": {
        "type": "string",
        "title": "Name",
        "enum": [
          "never",
          "unranked",
          "ranked"
        ],
        "example": "ranked"
      },
      "RecordID": {
        "type": "integer",
        "format": "uint64",
        "description": "An ID uniquely identifying a record.",
        "minimum": 0
      },
      "RecordStatus": {
        "type": "string",
        "description": "The different statuses for records.\n\nOnly \"default\" records are included when fetching records.",
        "enum": [
          "default",
          "suspicious",
          "cheated",
          "wiped"
        ]
      },
      "RegisterPlayerRequest": {
        "type": "object",
        "description": "Request payload for registering a new player.",
        "required": [
          "name",
          "steam_id",
          "ip_address"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The player's name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "ip_address": {
            "$ref": "#/components/schemas/IpAddr"
          }
        }
      },
      "RegisterServerRequest": {
        "type": "object",
        "description": "Request payload for registering a new server.",
        "required": [
          "name",
          "host",
          "port",
          "owner_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "host": {
            "$ref": "#/components/schemas/Host"
          },
          "port": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's port.",
            "minimum": 0
          },
          "owner_id": {
            "$ref": "#/components/schemas/SteamID"
          }
        }
      },
      "ResetKeyRequest": {
        "type": "object",
        "description": "Request payload for resetting a server's API key.",
        "required": [
          "server_id"
        ],
        "properties": {
          "server_id": {
            "$ref": "#/components/schemas/ServerID"
          }
        }
      },
      "Seconds": {
        "type": "number",
        "format": "double",
        "description": "A wrapper around [`std::time::Duration`] that ensures encoding/decoding\nalways happens in terms of seconds."
      },
      "ServerID": {
        "type": "integer",
        "format": "uint16",
        "description": "A unique identifier for an approved CS2KZ server.",
        "minimum": 0
      },
      "ServerIdentifier": {
        "oneOf": [
          {
            "type": "string",
            "title": "Name"
          },
          {
            "type": "integer",
            "title": "ID"
          }
        ],
        "description": "A server's ID or name"
      },
      "ServerInfo": {
        "type": "object",
        "description": "Basic information about a server.",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ServerID"
          },
          "name": {
            "type": "string",
            "description": "The server's name."
          }
        }
      },
      "ServerOwner": {
        "type": "object",
        "description": "Information about a server owner.",
        "required": [
          "name",
          "steam_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The owner's name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          }
        }
      },
      "Session": {
        "type": "object",
        "description": "An in-game player session.\n\nA session begins when the player joins the server, and ends when they\ndisconnect. A map change is also considered a disconnect.\n\nThese sessions are used to track various statistics long-term.",
        "required": [
          "seconds_active",
          "seconds_spectating",
          "seconds_afk",
          "bhop_stats"
        ],
        "properties": {
          "seconds_active": {
            "$ref": "#/components/schemas/Seconds"
          },
          "seconds_spectating": {
            "$ref": "#/components/schemas/Seconds"
          },
          "seconds_afk": {
            "$ref": "#/components/schemas/Seconds"
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          },
          "course_sessions": {
            "type": "object",
            "description": "Session information per course.",
            "additionalProperties": {
              "$ref": "#/components/schemas/CourseSession"
            }
          }
        }
      },
      "SessionID": {
        "type": "integer",
        "format": "uint64",
        "description": "An ID uniquely identifying an in-game session.",
        "minimum": 0
      },
      "SetPermissionsPayload": {
        "type": "object",
        "title": "SetPermissionsRequest",
        "description": "Request payload for the `set_permissions` handler.",
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        }
      },
      "SortOrder": {
        "type": "string",
        "description": "How to sort results.",
        "enum": [
          "ascending",
          "descending"
        ]
      },
      "SortRecordsBy": {
        "type": "string",
        "description": "Which property to sort results by.",
        "enum": [
          "time",
          "date"
        ]
      },
      "SteamID": {
        "oneOf": [
          {
            "type": "string",
            "title": "SteamID",
            "example": "STEAM_1:1:161178172",
            "pattern": "^STEAM_[0|1]:[0|1]:\\d+$"
          },
          {
            "type": "integer",
            "title": "SteamID64",
            "format": "uint64",
            "example": "76561198282622073",
            "maximum": 76561202255233024,
            "minimum": 76561197960265728
          },
          {
            "type": "integer",
            "title": "SteamID32",
            "format": "uint32",
            "example": "322356345",
            "maximum": 4294967295,
            "minimum": 1
          }
        ],
        "description": "a player's SteamID",
        "example": "STEAM_1:1:161178172"
      },
      "Styles": {
        "type": "string",
        "title": "Name",
        "enum": [
          "auto_bhop"
        ],
        "example": "auto_bhop"
      },
      "SubmitJumpstatRequestPayload": {
        "type": "object",
        "title": "SubmitJumpstatRequest",
        "required": [
          "jump_type",
          "mode",
          "player_id",
          "strafes",
          "distance",
          "sync",
          "pre",
          "max",
          "overlap",
          "bad_angles",
          "dead_air",
          "height",
          "airpath",
          "deviation",
          "average_width",
          "airtime"
        ],
        "properties": {
          "jump_type": {
            "$ref": "#/components/schemas/JumpType"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "player_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "strafes": {
            "type": "integer",
            "format": "uint8",
            "description": "How many strafes the player performed during the jump.",
            "minimum": 0
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "The distance cleared by the jump."
          },
          "sync": {
            "type": "number",
            "format": "float",
            "description": "The % of airtime spent gaining speed."
          },
          "pre": {
            "type": "number",
            "format": "float",
            "description": "The speed at jumpoff."
          },
          "max": {
            "type": "number",
            "format": "float",
            "description": "The maximum speed during the jump."
          },
          "overlap": {
            "$ref": "#/components/schemas/Seconds"
          },
          "bad_angles": {
            "$ref": "#/components/schemas/Seconds"
          },
          "dead_air": {
            "$ref": "#/components/schemas/Seconds"
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "The maximum height reached during the jump."
          },
          "airpath": {
            "type": "number",
            "format": "float",
            "description": "How close to a perfect airpath this jump was.\n\nThe closer to 1.0 the better."
          },
          "deviation": {
            "type": "number",
            "format": "float",
            "description": "How far the landing position deviates from the jumpoff position."
          },
          "average_width": {
            "type": "number",
            "format": "float",
            "description": "The average strafe width."
          },
          "airtime": {
            "$ref": "#/components/schemas/Seconds"
          }
        }
      },
      "SubmitMapRequest": {
        "type": "object",
        "description": "Request payload for submitting a new map.",
        "required": [
          "workshop_id",
          "global_status",
          "mappers",
          "courses"
        ],
        "properties": {
          "workshop_id": {
            "$ref": "#/components/schemas/WorkshopID"
          },
          "description": {
            "type": "string",
            "description": "Description of the map.",
            "nullable": true
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of SteamIDs of the players who contributed to the creation of this\nmap.",
            "uniqueItems": true
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewCourse"
            },
            "description": "The map's courses."
          }
        },
        "example": {
          "courses": [
            {
              "description": "the main course!",
              "filters": [
                {
                  "mode": "vanilla",
                  "notes": "gotta hit the funny jump :tf:",
                  "ranked_status": "ranked",
                  "teleports": true,
                  "tier": "hard"
                },
                {
                  "mode": "vanilla",
                  "ranked_status": "ranked",
                  "teleports": false,
                  "tier": "very_hard"
                },
                {
                  "mode": "classic",
                  "ranked_status": "ranked",
                  "teleports": true,
                  "tier": "easy"
                },
                {
                  "mode": "classic",
                  "ranked_status": "ranked",
                  "teleports": false,
                  "tier": "medium"
                }
              ],
              "mappers": [
                "76561198165203332"
              ],
              "name": "Main"
            }
          ],
          "global_status": "global",
          "mappers": [
            "76561198165203332"
          ],
          "workshop_id": 3070194623
        }
      },
      "SubmitPluginVersionRequest": {
        "type": "object",
        "description": "Request payload for submitting a new plugin version.",
        "required": [
          "semver",
          "git_revision"
        ],
        "properties": {
          "semver": {
            "type": "string",
            "description": "The semver representation of this version."
          },
          "git_revision": {
            "type": "string",
            "description": "The git revision associated with this version."
          }
        }
      },
      "SubmitRecordRequestPayload": {
        "type": "object",
        "title": "SubmitRecordRequest",
        "description": "Request payload for `POST /records`.",
        "required": [
          "course_id",
          "mode",
          "styles",
          "teleports",
          "time",
          "player_id",
          "bhop_stats"
        ],
        "properties": {
          "course_id": {
            "$ref": "#/components/schemas/CourseID"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "styles": {
            "$ref": "#/components/schemas/Styles"
          },
          "teleports": {
            "type": "integer",
            "format": "uint32",
            "description": "The amount of teleports used during this record.",
            "minimum": 0
          },
          "time": {
            "$ref": "#/components/schemas/Seconds"
          },
          "player_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          }
        }
      },
      "Tier": {
        "type": "string",
        "title": "Name",
        "enum": [
          "very_easy",
          "easy",
          "medium",
          "advanced",
          "hard",
          "very_hard",
          "extreme",
          "death",
          "unfeasible",
          "impossible"
        ],
        "example": "hard"
      },
      "Unban": {
        "type": "object",
        "description": "A reverted ban.",
        "required": [
          "id",
          "reason",
          "created_on"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UnbanID"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the unban."
          },
          "admin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerInfo"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When the ban was reverted."
          }
        }
      },
      "UnbanID": {
        "type": "integer",
        "format": "uint64",
        "description": "An ID uniquely identifying an unban.",
        "minimum": 0
      },
      "UnbanRequestPayload": {
        "type": "object",
        "title": "UnbanRequest",
        "required": [
          "reason"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason for the unban."
          }
        }
      },
      "UpdateBanRequestPayload": {
        "type": "object",
        "title": "UpdateBanRequest",
        "properties": {
          "new_reason": {
            "type": "string",
            "description": "A new ban reason.",
            "nullable": true
          },
          "new_expiration_date": {
            "type": "string",
            "format": "date-time",
            "description": "A new expiration date.",
            "nullable": true
          }
        }
      },
      "UpdateMapRequestPayload": {
        "type": "object",
        "title": "UpdateMapRequest",
        "description": "Query parameters for `PATCH /maps/{map}`.",
        "required": [
          "check_steam"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "A new description.",
            "nullable": true
          },
          "workshop_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkshopID"
              }
            ],
            "nullable": true
          },
          "global_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalStatus"
              }
            ],
            "nullable": true
          },
          "check_steam": {
            "type": "boolean",
            "description": "Whether to check the Workshop for a new name / checksum."
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of SteamIDs of players to add as mappers to this map.",
            "uniqueItems": true,
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of SteamIDs of players to remove as mappers from this map.",
            "uniqueItems": true,
            "nullable": true
          },
          "course_updates": {
            "type": "object",
            "description": "Updates to this map's courses.",
            "additionalProperties": {
              "$ref": "#/components/schemas/CourseUpdate"
            },
            "nullable": true
          }
        },
        "example": {
          "check_steam": true,
          "course_updates": {
            "1": {
              "description": "the main course! yippie!",
              "filter_updates": {
                "1": {
                  "notes": "this is really hard!"
                }
              }
            }
          },
          "description": "a new description"
        }
      },
      "UpdatePlayerPayload": {
        "type": "object",
        "title": "UpdatePlayerRequest",
        "description": "Request payload for `PATCH /players/{player}`.",
        "required": [
          "name",
          "ip_address",
          "preferences",
          "session"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The player's current name."
          },
          "ip_address": {
            "$ref": "#/components/schemas/IpAddr"
          },
          "preferences": {
            "type": "object",
            "description": "The player's current in-game preferences."
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          }
        }
      },
      "UpdateRecordAction": {
        "oneOf": [
          {
            "type": "object",
            "description": "Change the status of the record.",
            "required": [
              "new_status",
              "type"
            ],
            "properties": {
              "new_status": {
                "$ref": "#/components/schemas/RecordStatus"
              },
              "type": {
                "type": "string",
                "enum": [
                  "change_status"
                ]
              }
            }
          }
        ],
        "description": "Actions you can perform on a record.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "UpdateRecordRequestPayload": {
        "type": "object",
        "title": "UpdateRecordRequest",
        "description": "Request payload for `PATCH /records/{record}`.",
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/UpdateRecordAction"
          }
        }
      },
      "UpdateServerRequestPayload": {
        "type": "object",
        "title": "UpdateServerRequest",
        "description": "Request payload for `PATCH /servers/{server}`",
        "properties": {
          "new_name": {
            "type": "string",
            "description": "A new name.",
            "nullable": true
          },
          "new_host": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Host"
              }
            ],
            "nullable": true
          },
          "new_port": {
            "type": "integer",
            "format": "uint16",
            "description": "A new port.",
            "nullable": true,
            "minimum": 0
          },
          "new_owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SteamID"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpdatedCourse": {
        "type": "object",
        "description": "A course that was updated as a result of a map update.",
        "required": [
          "id",
          "updated_filter_ids"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CourseID"
          },
          "updated_filter_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterID"
            },
            "description": "A list of filter IDs of the filters that were updated as part of this\ncourse update."
          }
        }
      },
      "User": {
        "type": "object",
        "description": "A Steam user.",
        "required": [
          "steam_id",
          "steam_id64",
          "username",
          "profile_url",
          "avatar_url"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "steam_id64": {
            "$ref": "#/components/schemas/SteamID"
          },
          "username": {
            "type": "string",
            "description": "The user's username."
          },
          "realname": {
            "type": "string",
            "description": "The user's realname.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The user's country.",
            "nullable": true
          },
          "profile_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to the user's Steam profile."
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to the user's Steam avatar."
          }
        },
        "example": {
          "avatar_url": "https://avatars.steamstatic.com/da7587d32ed9cd619be8ecec623ce68a1a0afd63.jpg",
          "country": "DE",
          "profile_url": "https://steamcommunity.com/id/AlphaKeks/",
          "realname": "STEAM_1:1:161178172",
          "steam_id": "STEAM_1:1:161178172",
          "steam_id64": "76561198282622073",
          "username": "AlphaKeks"
        }
      },
      "WorkshopID": {
        "type": "integer",
        "format": "uint32",
        "description": "An ID uniquely identifying a Steam Workshop item.",
        "minimum": 0
      }
    },
    "securitySchemes": {
      "API Key": {
        "type": "http",
        "scheme": "bearer"
      },
      "Browser Session": {
        "type": "apiKey",
        "in": "cookie",
        "name": "kz-auth"
      },
      "CS2 Server": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "externalDocs": {
    "url": "https://docs.cs2kz.org",
    "description": "CS2KZ documentation"
  }
}