/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** (͡ ͡° ͜ つ ͡͡°) */
    get: operations["get"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/players": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_players"]
    put?: never
    post: operations["register_player"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/players/{player}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_player"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/players/{player_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations["update_player"]
    trace?: never
  }
  "/players/{player}/preferences": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_preferences"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/players/{player_id}/steam": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_steam_profile"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/maps": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_maps"]
    put: operations["submit_map"]
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/maps/{map}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_map"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/maps/{map_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations["update_map"]
    trace?: never
  }
  "/servers": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_servers"]
    put?: never
    post: operations["register_server"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/servers/auth": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations["generate_access_token"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/servers/{server}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_server"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/servers/{server_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations["update_server"]
    trace?: never
  }
  "/servers/{server_id}/key": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations["reset_api_key"]
    post?: never
    delete: operations["delete_api_key"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/records": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_records"]
    put?: never
    post: operations["submit_record"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/records/{record_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_record"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations["update_record"]
    trace?: never
  }
  "/records/{record_id}/replay": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_replay"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/jumpstats": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch many jumpstats. */
    get: operations["get_jumpstats"]
    put?: never
    post: operations["submit"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/jumpstats/{jumpstat_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch a jumpstat by its ID. */
    get: operations["get_jumpstat"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/bans": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch many bans. */
    get: operations["get_bans"]
    put?: never
    /** Ban a player. */
    post: operations["create"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/bans/{ban_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch a specific ban by its ID. */
    get: operations["get_ban"]
    put?: never
    post?: never
    /** Unban a player. */
    delete: operations["revert"]
    options?: never
    head?: never
    /** Update a ban. */
    patch: operations["update"]
    trace?: never
  }
  "/admins": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch many bans. */
    get: operations["get_admins"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/admins/{admin_id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch a specific ban by its ID. */
    get: operations["get_admin"]
    /** Set a user's permissions. */
    put: operations["set_permissions"]
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/plugin/versions": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_versions"]
    put?: never
    post: operations["submit_version"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/plugin/versions/{version}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations["get_version"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/login": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Login with Steam. */
    get: operations["login"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/logout": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Invalidate your existing session(s). */
    get: operations["logout"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/auth/verify-session": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Verify whether a session token is still valid.
     * @description This endpoint will return a status in the 4xx range if you do not have a
     *     valid session token, and a `200 OK` if you do.
     */
    get: operations["verify_session"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * Format: uuid
     * @description An API key for CS2 servers.
     */
    ApiKey: string
    /**
     * Format: uint64
     * @description An ID uniquely identifying a ban.
     */
    BanID: number
    /**
     * @description Reasons for which players can get banned.
     * @enum {string}
     */
    BanReason: "auto_bhop" | "auto_strafe" | "macro"
    /** BanRequest */
    BanRequestPayload: {
      player_id: components["schemas"]["SteamID"]
      player_ip?: components["schemas"]["IpAddr"] | null
      reason: components["schemas"]["BanReason"]
    }
    /** @description Statistics about bhop distribution during e.g. an in-game session. */
    BhopStats: {
      /**
       * Format: uint32
       * @description The total count.
       *
       *     This includes `perfs` and `perfect_perfs`.
       */
      total: number
      /**
       * Format: uint32
       * @description The "perf" count.
       *
       *     A "perf" is whatever the current [mode] considers to be a "perfect"
       *     bhop. This does **not** mean "tick-perfect"! That's what
       *     `perfect_perfs` is for.
       *
       *     [mode]: cs2kz::Mode
       */
      perfs: number
      /**
       * Format: uint32
       * @description The tick-perfect-bhop count.
       */
      perfect_perfs: number
    }
    /** @description A map file's checksum.
     *
     *     Currently this uses the MD5 hashing algorithm. */
    Checksum: string
    /** @description A KZ map course. */
    Course: {
      id: components["schemas"]["CourseID"]
      /** @description The course's name. */
      name?: string | null
      /** @description Description of the course. */
      description?: string | null
      /** @description Players who contributed to the creation of this course. */
      mappers: components["schemas"]["PlayerInfo"][]
      /** @description The course's filters. */
      filters: components["schemas"]["Filter"][]
    }
    /**
     * Format: uint16
     * @description A unique identifier for a KZ map course.
     */
    CourseID: number
    /** @description A course's ID or name */
    CourseIdentifier: string | number
    /** @description Information about a course a record was performed on. */
    CourseInfo: {
      id: components["schemas"]["CourseID"]
      /** @description The course's name. */
      name: string
      map_id: components["schemas"]["MapID"]
      /** @description The name of the map the course belongs to. */
      map_name: string
      tier: components["schemas"]["Tier"]
      ranked_status: components["schemas"]["RankedStatus"]
    }
    /** @description An in-game session on a specific course in a specific mode.
     *
     *     This contains data for both VNL and CKZ, which you can iterate over:
     *
     *     ```no_run
     *     use cs2kz_api::services::players::CourseSession;
     *
     *     let session: CourseSession = todo!();
     *
     *     for (mode, data) in &session {
     *     // ...
     *     }
     *     ``` */
    CourseSession: {
      vanilla?: components["schemas"]["CourseSessionData"] | null
      classic?: components["schemas"]["CourseSessionData"] | null
    }
    /** @description The raw data for an in-game session on a specific course. */
    CourseSessionData: {
      playtime: components["schemas"]["Seconds"]
      /**
       * Format: uint16
       * @description How many times the player left the start zone of this course.
       */
      started_runs: number
      /**
       * Format: uint16
       * @description How many times the player entered the end zone of this course.
       */
      finished_runs: number
      bhop_stats: components["schemas"]["BhopStats"]
    }
    /**
     * Format: uint64
     * @description An ID uniquely identifying an in-game per-course session.
     */
    CourseSessionID: number
    /** @description An update to a map course. */
    CourseUpdate: {
      /** @description A new name. */
      name?: string | null
      /** @description A new description. */
      description?: string | null
      /** @description List of SteamIDs of players to add as mappers to this course. */
      added_mappers?: components["schemas"]["SteamID"][] | null
      /** @description List of SteamIDs of players to remove as mappers from this course. */
      removed_mappers?: components["schemas"]["SteamID"][] | null
      /** @description Updates to this course's filters. */
      filter_updates?: {
        [key: string]: components["schemas"]["FilterUpdate"]
      } | null
    }
    /** @description Response payload for created courses when submitting a new map. */
    CreatedCourse: {
      id: components["schemas"]["CourseID"]
      /** @description The IDS of the course's filters. */
      filter_ids: components["schemas"]["FilterID"][]
    }
    /** @description Request payload for deleting a server's API key. */
    DeleteKeyRequest: {
      server_id: components["schemas"]["ServerID"]
    }
    /** @description Response payload for fetching an admin. */
    FetchAdminResponse: {
      /** @description The admin's name. */
      name: string
      steam_id: components["schemas"]["SteamID"]
      permissions: components["schemas"]["Permissions"]
    }
    /** @description Response payload for fetching a ban. */
    FetchBanResponse: {
      id: components["schemas"]["BanID"]
      player: components["schemas"]["PlayerInfo"]
      server?: components["schemas"]["ServerInfo"] | null
      admin?: components["schemas"]["PlayerInfo"] | null
      reason: components["schemas"]["BanReason"]
      /**
       * Format: date-time
       * @description When this ban was created.
       */
      created_on: string
      /**
       * Format: date-time
       * @description When this ban will expire.
       *
       *     This is `null` for permanent bans.
       */
      expires_on?: string | null
      unban?: components["schemas"]["Unban"] | null
    }
    /** @description Response payload for fetching a jumpstat. */
    FetchJumpstatResponse: {
      id: components["schemas"]["JumpstatID"]
      type: components["schemas"]["JumpType"]
      mode: components["schemas"]["Mode"]
      player: components["schemas"]["PlayerInfo"]
      server: components["schemas"]["ServerInfo"]
      /**
       * Format: uint8
       * @description How many strafes the player performed during the jump.
       */
      strafes: number
      /**
       * Format: float
       * @description The distance cleared by the jump.
       */
      distance: number
      /**
       * Format: float
       * @description The % of airtime spent gaining speed.
       */
      sync: number
      /**
       * Format: float
       * @description The speed at jumpoff.
       */
      pre: number
      /**
       * Format: float
       * @description The maximum speed during the jump.
       */
      max: number
      overlap: components["schemas"]["Seconds"]
      bad_angles: components["schemas"]["Seconds"]
      dead_air: components["schemas"]["Seconds"]
      /**
       * Format: float
       * @description The maximum height reached during the jump.
       */
      height: number
      /**
       * Format: float
       * @description How close to a perfect airpath this jump was.
       *
       *     The closer to 1.0 the better.
       */
      airpath: number
      /**
       * Format: float
       * @description How far the landing position deviates from the jumpoff position.
       */
      deviation: number
      /**
       * Format: float
       * @description The average strafe width.
       */
      average_width: number
      airtime: components["schemas"]["Seconds"]
      /**
       * Format: date-time
       * @description When this jumpstat was submitted.
       */
      created_on: string
    }
    /** @description Response payload for fetching a map. */
    FetchMapResponse: {
      id: components["schemas"]["MapID"]
      /** @description The map's name. */
      name: string
      /** @description Description of the map. */
      description?: string | null
      global_status: components["schemas"]["GlobalStatus"]
      workshop_id: components["schemas"]["WorkshopID"]
      checksum: components["schemas"]["Checksum"]
      /** @description Players who contributed to the creation of this map. */
      mappers: components["schemas"]["PlayerInfo"][]
      /** @description The map's courses. */
      courses: components["schemas"]["Course"][]
      /**
       * Format: date-time
       * @description When this map was approved.
       */
      created_on: string
    }
    /** @description Response payload for fetching a player. */
    FetchPlayerResponse: components["schemas"]["PlayerInfo"] & {
      /** @description Whether the player is currently banned. */
      is_banned: boolean
      ip_address?: components["schemas"]["IpAddr"] | null
    }
    /** @description Request payload for fetching a plugin version. */
    FetchPluginVersionResponse: {
      id: components["schemas"]["PluginVersionID"]
      semver: components["schemas"]["PluginVersion"]
      /** @description The git revision associated with this version. */
      git_revision: string
      /**
       * Format: date-time
       * @description When this version was submitted.
       */
      created_on: string
    }
    /** @description Response payload for fetching a record. */
    FetchRecordResponse: {
      id: components["schemas"]["RecordID"]
      mode: components["schemas"]["Mode"]
      styles: components["schemas"]["Styles"]
      /**
       * Format: uint32
       * @description The amount of teleports used when setting this record.
       */
      teleports: number
      time: components["schemas"]["Seconds"]
      course: components["schemas"]["CourseInfo"]
      player: components["schemas"]["PlayerInfo"]
      server: components["schemas"]["ServerInfo"]
      bhop_stats: components["schemas"]["BhopStats"]
      /**
       * Format: date-time
       * @description When this record was submitted.
       */
      created_on: string
    }
    /** @description Response payload for fetching information about a server. */
    FetchServerResponse: {
      id: components["schemas"]["ServerID"]
      /** @description The server's name. */
      name: string
      host: components["schemas"]["Host"]
      /**
       * Format: uint16
       * @description The server's port.
       */
      port: number
      owner: components["schemas"]["ServerOwner"]
      /**
       * Format: date-time
       * @description When this server was approved.
       */
      created_on: string
    }
    /** @description A KZ map course filter. */
    Filter: {
      id: components["schemas"]["FilterID"]
      mode: components["schemas"]["Mode"]
      /** @description Whether this filter is for teleport runs. */
      teleports: boolean
      tier: components["schemas"]["Tier"]
      ranked_status: components["schemas"]["RankedStatus"]
      /** @description Any additional notes. */
      notes?: string | null
    }
    /**
     * Format: uint16
     * @description A unique identifier for a KZ map course filter.
     */
    FilterID: number
    /** @description An update to a course filter. */
    FilterUpdate: {
      tier?: components["schemas"]["Tier"] | null
      ranked_status?: components["schemas"]["RankedStatus"] | null
      /** @description New notes. */
      notes?: string | null
    }
    /** @description Request payload for generating a temporary access token. */
    GenerateAccessTokenRequest: {
      key: components["schemas"]["ApiKey"]
      plugin_version: components["schemas"]["PluginVersion"]
    }
    /**
     * @default global
     * @example global
     */
    GlobalStatus: ("not_global" | "in_testing" | "global") | (-1 | 0 | 1)
    /** @description A CS2 server host. */
    Host: components["schemas"]["IpAddr"] | string
    /** @description A wrapper around [`std::net::Ipv6Addr`] that correctly takes care of mapped
     *     IPv4 addresses when encoding/decoding. */
    IpAddr: string
    /** @example longjump */
    JumpType:
      | (
          | "longjump"
          | "single_bhop"
          | "multi_bhop"
          | "weirdjump"
          | "ladderjump"
          | "ladderhop"
        )
      | (1 | 2 | 3 | 4 | 5 | 6)
    /**
     * Format: uint64
     * @description An ID uniquely identifying an jumpstat.
     */
    JumpstatID: number
    /**
     * Format: uint16
     * @description A unique identifier for a KZ map.
     */
    MapID: number
    /** @description A map's ID or name */
    MapIdentifier: string | number
    /**
     * @description a KZ Mode
     * @example ckz
     */
    Mode: ("vanilla" | "classic") | (1 | 2)
    /**
     * @description Request payload for a course when submitting a new map.
     * @example {
     *       "description": "the main course!",
     *       "filters": [
     *         {
     *           "mode": "vanilla",
     *           "notes": "gotta hit the funny jump :tf:",
     *           "ranked_status": "ranked",
     *           "teleports": true,
     *           "tier": "hard"
     *         },
     *         {
     *           "mode": "vanilla",
     *           "ranked_status": "ranked",
     *           "teleports": false,
     *           "tier": "very_hard"
     *         },
     *         {
     *           "mode": "classic",
     *           "ranked_status": "ranked",
     *           "teleports": true,
     *           "tier": "easy"
     *         },
     *         {
     *           "mode": "classic",
     *           "ranked_status": "ranked",
     *           "teleports": false,
     *           "tier": "medium"
     *         }
     *       ],
     *       "mappers": [
     *         "76561198165203332"
     *       ],
     *       "name": "Main"
     *     }
     */
    NewCourse: {
      /** @description The course's name. */
      name?: string | null
      /** @description Description of the course. */
      description?: string | null
      /** @description List of SteamIDs of the players who contributed to the creation of this
       *     course. */
      mappers: components["schemas"]["SteamID"][]
      /** @description The course's filters. */
      filters: components["schemas"]["NewFilter"][]
    }
    /**
     * @description Request payload for a course filter when submitting a new map.
     * @example {
     *       "mode": "vanilla",
     *       "notes": "gotta hit the funny jump :tf:",
     *       "ranked_status": "ranked",
     *       "teleports": true,
     *       "tier": "hard"
     *     }
     */
    NewFilter: {
      mode: components["schemas"]["Mode"]
      /** @description Whether this filter is for teleport runs. */
      teleports: boolean
      tier: components["schemas"]["Tier"]
      ranked_status: components["schemas"]["RankedStatus"]
      /** @description Any additional notes. */
      notes?: string | null
    }
    Permissions: (
      | ("bans" | "records" | "servers" | "maps" | "admin")
      | (1 | 2 | 256 | 65536 | 2147483648)
    )[]
    /** @description A SteamID or name */
    PlayerIdentifier: string | (string | number)
    /** @description Basic information about a player. */
    PlayerInfo: {
      /** @description The player's name. */
      name: string
      steam_id: components["schemas"]["SteamID"]
    }
    /**
     * @description A CS2KZ plugin version.
     * @example 0.0.1
     */
    PluginVersion: string
    /**
     * Format: uint16
     * @description A unique identifier for CS2KZ versions.
     */
    PluginVersionID: number
    /** @example ranked */
    RankedStatus: ("never" | "unranked" | "ranked") | (-1 | 0 | 1)
    /**
     * Format: uint64
     * @description An ID uniquely identifying a record.
     */
    RecordID: number
    /**
     * @description The different statuses for records.
     *
     *     Only "default" records are included when fetching records.
     * @enum {string}
     */
    RecordStatus: "default" | "suspicious" | "cheated" | "wiped"
    /** @description Request payload for registering a new player. */
    RegisterPlayerRequest: {
      /** @description The player's name. */
      name: string
      steam_id: components["schemas"]["SteamID"]
      ip_address: components["schemas"]["IpAddr"]
    }
    /** @description Request payload for registering a new server. */
    RegisterServerRequest: {
      /** @description The server's name. */
      name: string
      host: components["schemas"]["Host"]
      /**
       * Format: uint16
       * @description The server's port.
       */
      port: number
      owner_id: components["schemas"]["SteamID"]
    }
    /** @description Request payload for resetting a server's API key. */
    ResetKeyRequest: {
      server_id: components["schemas"]["ServerID"]
    }
    /**
     * Format: double
     * @description A wrapper around [`std::time::Duration`] that ensures encoding/decoding
     *     always happens in terms of seconds.
     */
    Seconds: number
    /**
     * Format: uint16
     * @description A unique identifier for an approved CS2KZ server.
     */
    ServerID: number
    /** @description A server's ID or name */
    ServerIdentifier: string | number
    /** @description Basic information about a server. */
    ServerInfo: {
      id: components["schemas"]["ServerID"]
      /** @description The server's name. */
      name: string
    }
    /** @description Information about a server owner. */
    ServerOwner: {
      /** @description The owner's name. */
      name: string
      steam_id: components["schemas"]["SteamID"]
    }
    /** @description An in-game player session.
     *
     *     A session begins when the player joins the server, and ends when they
     *     disconnect. A map change is also considered a disconnect.
     *
     *     These sessions are used to track various statistics long-term. */
    Session: {
      seconds_active: components["schemas"]["Seconds"]
      seconds_spectating: components["schemas"]["Seconds"]
      seconds_afk: components["schemas"]["Seconds"]
      bhop_stats: components["schemas"]["BhopStats"]
      /** @description Session information per course. */
      course_sessions?: {
        [key: string]: components["schemas"]["CourseSession"]
      }
    }
    /**
     * Format: uint64
     * @description An ID uniquely identifying an in-game session.
     */
    SessionID: number
    /**
     * SetPermissionsRequest
     * @description Request payload for the `set_permissions` handler.
     */
    SetPermissionsPayload: {
      permissions: components["schemas"]["Permissions"]
    }
    /**
     * @description How to sort results.
     * @enum {string}
     */
    SortOrder: "ascending" | "descending"
    /**
     * @description Which property to sort results by.
     * @enum {string}
     */
    SortRecordsBy: "time" | "date"
    /**
     * @description a player's SteamID
     * @example STEAM_1:1:161178172
     */
    SteamID: string | number
    Styles: ("auto_bhop" | 1)[]
    /** SubmitJumpstatRequest */
    SubmitJumpstatRequestPayload: {
      jump_type: components["schemas"]["JumpType"]
      mode: components["schemas"]["Mode"]
      player_id: components["schemas"]["SteamID"]
      /**
       * Format: uint8
       * @description How many strafes the player performed during the jump.
       */
      strafes: number
      /**
       * Format: float
       * @description The distance cleared by the jump.
       */
      distance: number
      /**
       * Format: float
       * @description The % of airtime spent gaining speed.
       */
      sync: number
      /**
       * Format: float
       * @description The speed at jumpoff.
       */
      pre: number
      /**
       * Format: float
       * @description The maximum speed during the jump.
       */
      max: number
      overlap: components["schemas"]["Seconds"]
      bad_angles: components["schemas"]["Seconds"]
      dead_air: components["schemas"]["Seconds"]
      /**
       * Format: float
       * @description The maximum height reached during the jump.
       */
      height: number
      /**
       * Format: float
       * @description How close to a perfect airpath this jump was.
       *
       *     The closer to 1.0 the better.
       */
      airpath: number
      /**
       * Format: float
       * @description How far the landing position deviates from the jumpoff position.
       */
      deviation: number
      /**
       * Format: float
       * @description The average strafe width.
       */
      average_width: number
      airtime: components["schemas"]["Seconds"]
    }
    /**
     * @description Request payload for submitting a new map.
     * @example {
     *       "courses": [
     *         {
     *           "description": "the main course!",
     *           "filters": [
     *             {
     *               "mode": "vanilla",
     *               "notes": "gotta hit the funny jump :tf:",
     *               "ranked_status": "ranked",
     *               "teleports": true,
     *               "tier": "hard"
     *             },
     *             {
     *               "mode": "vanilla",
     *               "ranked_status": "ranked",
     *               "teleports": false,
     *               "tier": "very_hard"
     *             },
     *             {
     *               "mode": "classic",
     *               "ranked_status": "ranked",
     *               "teleports": true,
     *               "tier": "easy"
     *             },
     *             {
     *               "mode": "classic",
     *               "ranked_status": "ranked",
     *               "teleports": false,
     *               "tier": "medium"
     *             }
     *           ],
     *           "mappers": [
     *             "76561198165203332"
     *           ],
     *           "name": "Main"
     *         }
     *       ],
     *       "global_status": "global",
     *       "mappers": [
     *         "76561198165203332"
     *       ],
     *       "workshop_id": 3070194623
     *     }
     */
    SubmitMapRequest: {
      workshop_id: components["schemas"]["WorkshopID"]
      /** @description Description of the map. */
      description?: string | null
      global_status: components["schemas"]["GlobalStatus"]
      /** @description List of SteamIDs of the players who contributed to the creation of this
       *     map. */
      mappers: components["schemas"]["SteamID"][]
      /** @description The map's courses. */
      courses: components["schemas"]["NewCourse"][]
    }
    /** @description Request payload for submitting a new plugin version. */
    SubmitPluginVersionRequest: {
      /** @description The semver representation of this version. */
      semver: string
      /** @description The git revision associated with this version. */
      git_revision: string
    }
    /**
     * SubmitRecordRequest
     * @description Request payload for `POST /records`.
     */
    SubmitRecordRequestPayload: {
      course_id: components["schemas"]["CourseID"]
      mode: components["schemas"]["Mode"]
      styles: components["schemas"]["Styles"]
      /**
       * Format: uint32
       * @description The amount of teleports used during this record.
       */
      teleports: number
      time: components["schemas"]["Seconds"]
      player_id: components["schemas"]["SteamID"]
      bhop_stats: components["schemas"]["BhopStats"]
    }
    /** @example hard */
    Tier:
      | (
          | "very_easy"
          | "easy"
          | "medium"
          | "advanced"
          | "hard"
          | "very_hard"
          | "extreme"
          | "death"
          | "unfeasible"
          | "impossible"
        )
      | (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10)
    /** @description A reverted ban. */
    Unban: {
      id: components["schemas"]["UnbanID"]
      /** @description The reason for the unban. */
      reason: string
      admin?: components["schemas"]["PlayerInfo"] | null
      /**
       * Format: date-time
       * @description When the ban was reverted.
       */
      created_on: string
    }
    /**
     * Format: uint64
     * @description An ID uniquely identifying an unban.
     */
    UnbanID: number
    /** UnbanRequest */
    UnbanRequestPayload: {
      /** @description The reason for the unban. */
      reason: string
    }
    /** UpdateBanRequest */
    UpdateBanRequestPayload: {
      /** @description A new ban reason. */
      new_reason?: string | null
      /**
       * Format: date-time
       * @description A new expiration date.
       */
      new_expiration_date?: string | null
    }
    /**
     * UpdateMapRequest
     * @description Query parameters for `PATCH /maps/{map}`.
     * @example {
     *       "check_steam": true,
     *       "course_updates": {
     *         "1": {
     *           "description": "the main course! yippie!",
     *           "filter_updates": {
     *             "1": {
     *               "notes": "this is really hard!"
     *             }
     *           }
     *         }
     *       },
     *       "description": "a new description"
     *     }
     */
    UpdateMapRequestPayload: {
      /** @description A new description. */
      description?: string | null
      workshop_id?: components["schemas"]["WorkshopID"] | null
      global_status?: components["schemas"]["GlobalStatus"] | null
      /** @description Whether to check the Workshop for a new name / checksum. */
      check_steam: boolean
      /** @description List of SteamIDs of players to add as mappers to this map. */
      added_mappers?: components["schemas"]["SteamID"][] | null
      /** @description List of SteamIDs of players to remove as mappers from this map. */
      removed_mappers?: components["schemas"]["SteamID"][] | null
      /** @description Updates to this map's courses. */
      course_updates?: {
        [key: string]: components["schemas"]["CourseUpdate"]
      } | null
    }
    /**
     * UpdatePlayerRequest
     * @description Request payload for `PATCH /players/{player}`.
     */
    UpdatePlayerPayload: {
      /** @description The player's current name. */
      name: string
      ip_address: components["schemas"]["IpAddr"]
      /** @description The player's current in-game preferences. */
      preferences: Record<string, never>
      session: components["schemas"]["Session"]
    }
    /** @description Actions you can perform on a record. */
    UpdateRecordAction: {
      new_status: components["schemas"]["RecordStatus"]
      /** @enum {string} */
      type: "change_status"
    }
    /**
     * UpdateRecordRequest
     * @description Request payload for `PATCH /records/{record}`.
     */
    UpdateRecordRequestPayload: {
      action: components["schemas"]["UpdateRecordAction"]
    }
    /**
     * UpdateServerRequest
     * @description Request payload for `PATCH /servers/{server}`
     */
    UpdateServerRequestPayload: {
      /** @description A new name. */
      new_name?: string | null
      new_host?: components["schemas"]["Host"] | null
      /**
       * Format: uint16
       * @description A new port.
       */
      new_port?: number | null
      new_owner?: components["schemas"]["SteamID"] | null
    }
    /** @description A course that was updated as a result of a map update. */
    UpdatedCourse: {
      id: components["schemas"]["CourseID"]
      /** @description A list of filter IDs of the filters that were updated as part of this
       *     course update. */
      updated_filter_ids: components["schemas"]["FilterID"][]
    }
    /**
     * @description A Steam user.
     * @example {
     *       "avatar_url": "https://avatars.steamstatic.com/da7587d32ed9cd619be8ecec623ce68a1a0afd63.jpg",
     *       "country": "DE",
     *       "profile_url": "https://steamcommunity.com/id/AlphaKeks/",
     *       "realname": "STEAM_1:1:161178172",
     *       "steam_id": "STEAM_1:1:161178172",
     *       "steam_id64": "76561198282622073",
     *       "username": "AlphaKeks"
     *     }
     */
    User: {
      steam_id: components["schemas"]["SteamID"]
      steam_id64: components["schemas"]["SteamID"]
      /** @description The user's username. */
      username: string
      /** @description The user's realname. */
      realname?: string | null
      /** @description The user's country. */
      country?: string | null
      /**
       * Format: uri
       * @description URL to the user's Steam profile.
       */
      profile_url: string
      /**
       * Format: uri
       * @description URL to the user's Steam avatar.
       */
      avatar_url: string
    }
    /**
     * Format: uint32
     * @description An ID uniquely identifying a Steam Workshop item.
     */
    WorkshopID: number
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  get: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The API is healthy. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "text/plain": string
        }
      }
    }
  }
  get_players: {
    parameters: {
      query?: {
        /** @description The maximum amount of players to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching potentially many players. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The player data for this request. */
            players: components["schemas"]["FetchPlayerResponse"][]
            /**
             * Format: uint64
             * @description How many players **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  register_player: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterPlayerRequest"]
      }
    }
    responses: {
      /** @description Response payload for registering a new player. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            player_id: components["schemas"]["SteamID"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_player: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a player's SteamID or name */
        player: components["schemas"]["PlayerIdentifier"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching a player. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PlayerInfo"] & {
            /** @description Whether the player is currently banned. */
            is_banned: boolean
            ip_address?: components["schemas"]["IpAddr"] | null
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_player: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a player's SteamID */
        player_id: components["schemas"]["SteamID"]
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePlayerPayload"]
      }
    }
    responses: {
      /** @description Response payload for updating an existing player. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            session_id: components["schemas"]["SessionID"]
            /** @description The IDs of the created course sessions. */
            course_session_ids: components["schemas"]["CourseSessionID"][]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_preferences: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a player's SteamID or name */
        player: components["schemas"]["PlayerIdentifier"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching a player's in-game preferences. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The player's preferences. */
            preferences: unknown
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_steam_profile: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a player's SteamID */
        player_id: components["schemas"]["SteamID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching a player's Steam profile. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            steam_id: components["schemas"]["SteamID"]
            steam_id64: components["schemas"]["SteamID"]
            /** @description The user's username. */
            username: string
            /** @description The user's realname. */
            realname?: string | null
            /** @description The user's country. */
            country?: string | null
            /**
             * Format: uri
             * @description URL to the user's Steam profile.
             */
            profile_url: string
            /**
             * Format: uri
             * @description URL to the user's Steam avatar.
             */
            avatar_url: string
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_maps: {
    parameters: {
      query?: {
        /** @description Filter by name. */
        name?: string | null
        /** @description Filter by workshop ID. */
        workshop_id?: components["schemas"]["WorkshopID"] | null
        /** @description Filter by global status. */
        global_status?: components["schemas"]["GlobalStatus"] | null
        /** @description Only include maps approved after this date. */
        created_after?: string | null
        /** @description Only include maps approved before this date. */
        created_before?: string | null
        /** @description Maximum number of results to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching maps. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The maps. */
            maps: components["schemas"]["FetchMapResponse"][]
            /**
             * Format: uint64
             * @description How many maps **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  submit_map: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitMapRequest"]
      }
    }
    responses: {
      /** @description Response payload for submitting a new map. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            map_id: components["schemas"]["MapID"]
            /** @description IDs related to the created courses. */
            courses: components["schemas"]["CreatedCourse"][]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_map: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a map's ID or name */
        map: components["schemas"]["MapIdentifier"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching a map. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            id: components["schemas"]["MapID"]
            /** @description The map's name. */
            name: string
            /** @description Description of the map. */
            description?: string | null
            global_status: components["schemas"]["GlobalStatus"]
            workshop_id: components["schemas"]["WorkshopID"]
            checksum: components["schemas"]["Checksum"]
            /** @description Players who contributed to the creation of this map. */
            mappers: components["schemas"]["PlayerInfo"][]
            /** @description The map's courses. */
            courses: components["schemas"]["Course"][]
            /**
             * Format: date-time
             * @description When this map was approved.
             */
            created_on: string
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_map: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a map's ID */
        map_id: components["schemas"]["MapID"]
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMapRequestPayload"]
      }
    }
    responses: {
      /** @description Response payload for updating an existing map. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description A list of courses that were updated. */
            updated_courses: components["schemas"]["UpdatedCourse"][]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_servers: {
    parameters: {
      query?: {
        /** @description Filter by server name. */
        name?: string | null
        /** @description Filter by server host. */
        host?: components["schemas"]["Host"] | null
        /** @description Filter by server owner. */
        owned_by?: components["schemas"]["PlayerIdentifier"] | null
        /** @description Filter by approval date. */
        created_after?: string | null
        /** @description Filter by approval date. */
        created_before?: string | null
        /** @description The maximum amount of servers to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching information about servers. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The servers. */
            servers: components["schemas"]["FetchServerResponse"][]
            /**
             * Format: uint64
             * @description How many servers **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  register_server: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterServerRequest"]
      }
    }
    responses: {
      /** @description Response payload for registering a new server. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            server_id: components["schemas"]["ServerID"]
            api_key: components["schemas"]["ApiKey"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  generate_access_token: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateAccessTokenRequest"]
      }
    }
    responses: {
      /** @description Response payload for generating a temporary access token. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The token. */
            token: string
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_server: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a server's ID or name */
        server: components["schemas"]["ServerIdentifier"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching information about a server. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            id: components["schemas"]["ServerID"]
            /** @description The server's name. */
            name: string
            host: components["schemas"]["Host"]
            /**
             * Format: uint16
             * @description The server's port.
             */
            port: number
            owner: components["schemas"]["ServerOwner"]
            /**
             * Format: date-time
             * @description When this server was approved.
             */
            created_on: string
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_server: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a server's ID */
        server_id: components["schemas"]["ServerID"]
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateServerRequestPayload"]
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  reset_api_key: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a server's ID */
        server_id: components["schemas"]["ServerID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for resetting a server's API key. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            key: components["schemas"]["ApiKey"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete_api_key: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a server's ID */
        server_id: components["schemas"]["ServerID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_records: {
    parameters: {
      query?: {
        /** @description Filter by mode. */
        mode?: components["schemas"]["Mode"] | null
        /** @description Filter by styles.
         *
         *     This is not an exact match; results will contain records that
         *     **include** these styles, but may also have more. */
        styles?: components["schemas"]["Styles"] | null
        /** @description Filter by whether records have teleports or not. */
        has_teleports?: boolean | null
        /** @description Filter by course. */
        course?: components["schemas"]["CourseIdentifier"] | null
        /** @description Filter by map. */
        map?: components["schemas"]["MapIdentifier"] | null
        /** @description Filter by player. */
        player?: components["schemas"]["PlayerIdentifier"] | null
        /** @description Filter by server. */
        server?: components["schemas"]["ServerIdentifier"] | null
        /** @description Only include top records.
         *
         *     That is, only include the fastest time per player per filter. */
        top?: boolean
        /** @description In which order to sort the results.
         *
         *     This will have different defaults depending on `sort_by`, but if this
         *     field is specified, the order is forced. */
        sort_order?: components["schemas"]["SortOrder"] | null
        /** @description Which property to sort the results after. */
        sort_by?: components["schemas"]["SortRecordsBy"]
        /** @description Only include records submitted after this date. */
        created_after?: string | null
        /** @description Only include records submitted before this date. */
        created_before?: string | null
        /** @description The maximum amount of records to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching records. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The records. */
            records: components["schemas"]["FetchRecordResponse"][]
            /**
             * Format: uint64
             * @description How many records **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  submit_record: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitRecordRequestPayload"]
      }
    }
    responses: {
      /** @description Response payload for submitting a new record. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            record_id: components["schemas"]["RecordID"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_record: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a record ID */
        record_id: components["schemas"]["RecordID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching a record. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            id: components["schemas"]["RecordID"]
            mode: components["schemas"]["Mode"]
            styles: components["schemas"]["Styles"]
            /**
             * Format: uint32
             * @description The amount of teleports used when setting this record.
             */
            teleports: number
            time: components["schemas"]["Seconds"]
            course: components["schemas"]["CourseInfo"]
            player: components["schemas"]["PlayerInfo"]
            server: components["schemas"]["ServerInfo"]
            bhop_stats: components["schemas"]["BhopStats"]
            /**
             * Format: date-time
             * @description When this record was submitted.
             */
            created_on: string
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_record: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a record ID */
        record_id: components["schemas"]["RecordID"]
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRecordRequestPayload"]
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_replay: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a record ID */
        record_id: components["schemas"]["RecordID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Response payload for fetching a record's replay. */
      503: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @default null */
            _priv: unknown
          }
        }
      }
    }
  }
  get_jumpstats: {
    parameters: {
      query?: {
        /** @description Filter by jump type. */
        type?: components["schemas"]["JumpType"] | null
        /** @description Filter by mode. */
        mode?: components["schemas"]["Mode"] | null
        /** @description Filter by required minimum distance. */
        minimum_distance?: number | null
        /** @description Filter by player. */
        player?: components["schemas"]["PlayerIdentifier"] | null
        /** @description Filter by server. */
        server?: components["schemas"]["ServerIdentifier"] | null
        /** @description Only include jumpstats submitted after this date. */
        created_after?: string | null
        /** @description Only include jumpstats submitted before this date. */
        created_before?: string | null
        /** @description Maximum number of results to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching jumpstats. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The jumpstats. */
            jumpstats: components["schemas"]["FetchJumpstatResponse"][]
            /**
             * Format: uint64
             * @description How many jumpstats **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  submit: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitJumpstatRequestPayload"]
      }
    }
    responses: {
      /** @description Response payload for submitting a new jumpstat. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            jumpstat_id: components["schemas"]["JumpstatID"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_jumpstat: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a jumpstat's ID */
        jumpstat_id: components["schemas"]["JumpstatID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching a jumpstat. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            id: components["schemas"]["JumpstatID"]
            type: components["schemas"]["JumpType"]
            mode: components["schemas"]["Mode"]
            player: components["schemas"]["PlayerInfo"]
            server: components["schemas"]["ServerInfo"]
            /**
             * Format: uint8
             * @description How many strafes the player performed during the jump.
             */
            strafes: number
            /**
             * Format: float
             * @description The distance cleared by the jump.
             */
            distance: number
            /**
             * Format: float
             * @description The % of airtime spent gaining speed.
             */
            sync: number
            /**
             * Format: float
             * @description The speed at jumpoff.
             */
            pre: number
            /**
             * Format: float
             * @description The maximum speed during the jump.
             */
            max: number
            overlap: components["schemas"]["Seconds"]
            bad_angles: components["schemas"]["Seconds"]
            dead_air: components["schemas"]["Seconds"]
            /**
             * Format: float
             * @description The maximum height reached during the jump.
             */
            height: number
            /**
             * Format: float
             * @description How close to a perfect airpath this jump was.
             *
             *     The closer to 1.0 the better.
             */
            airpath: number
            /**
             * Format: float
             * @description How far the landing position deviates from the jumpoff position.
             */
            deviation: number
            /**
             * Format: float
             * @description The average strafe width.
             */
            average_width: number
            airtime: components["schemas"]["Seconds"]
            /**
             * Format: date-time
             * @description When this jumpstat was submitted.
             */
            created_on: string
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_bans: {
    parameters: {
      query?: {
        /** @description Filter by player. */
        player?: components["schemas"]["PlayerIdentifier"] | null
        /** @description Filter by server. */
        server?: components["schemas"]["ServerIdentifier"] | null
        /** @description Filter by ban reason. */
        reason?: components["schemas"]["BanReason"] | null
        /** @description Only include bans that have (not) already expired / have been reverted. */
        unbanned?: boolean | null
        /** @description Filter by admin who created the ban. */
        banned_by?: components["schemas"]["PlayerIdentifier"] | null
        /** @description Filter by admin who created the unban. */
        unbanned_by?: components["schemas"]["PlayerIdentifier"] | null
        /** @description Filter by creation date. */
        created_after?: string | null
        /** @description Filter by creation date. */
        created_before?: string | null
        /** @description The maximum amount of bans to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching bans. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The bans. */
            bans: components["schemas"]["FetchBanResponse"][]
            /**
             * Format: uint64
             * @description How many bans **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["BanRequestPayload"]
      }
    }
    responses: {
      /** @description Response payload for banning a player. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            ban_id: components["schemas"]["BanID"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_ban: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a ban's ID */
        ban_id: components["schemas"]["BanID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching a ban. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            id: components["schemas"]["BanID"]
            player: components["schemas"]["PlayerInfo"]
            server?: components["schemas"]["ServerInfo"] | null
            admin?: components["schemas"]["PlayerInfo"] | null
            reason: components["schemas"]["BanReason"]
            /**
             * Format: date-time
             * @description When this ban was created.
             */
            created_on: string
            /**
             * Format: date-time
             * @description When this ban will expire.
             *
             *     This is `null` for permanent bans.
             */
            expires_on?: string | null
            unban?: components["schemas"]["Unban"] | null
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  revert: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a ban's ID */
        ban_id: components["schemas"]["BanID"]
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UnbanRequestPayload"]
      }
    }
    responses: {
      /** @description Response payload for reverting a ban. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            unban_id: components["schemas"]["UnbanID"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a ban's ID */
        ban_id: components["schemas"]["BanID"]
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateBanRequestPayload"]
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_admins: {
    parameters: {
      query?: {
        /** @description Only include admins with these permissions. */
        required_permissions?: components["schemas"]["Permissions"]
        /** @description The maximum amount of admins to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching many admins. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The admins. */
            admins: components["schemas"]["FetchAdminResponse"][]
            /**
             * Format: uint64
             * @description How many admins **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_admin: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description an admin's SteamID */
        admin_id: components["schemas"]["SteamID"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching an admin. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The admin's name. */
            name: string
            steam_id: components["schemas"]["SteamID"]
            permissions: components["schemas"]["Permissions"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  set_permissions: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description an admin's SteamID */
        admin_id: components["schemas"]["SteamID"]
      }
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetPermissionsPayload"]
      }
    }
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_versions: {
    parameters: {
      query?: {
        /** @description The maximum amount of versions to return. */
        limit?: number
        /** @description Pagination offset. */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for fetching plugin versions. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description The versions. */
            versions: components["schemas"]["FetchPluginVersionResponse"][]
            /**
             * Format: uint64
             * @description How many versions **could have been** fetched, if there was no limit.
             */
            total: number
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  submit_version: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitPluginVersionRequest"]
      }
    }
    responses: {
      /** @description Response payload for submitting a new plugin version. */
      201: {
        headers: {
          /** @description a relative uri to fetch the created resource */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            plugin_version_id: components["schemas"]["PluginVersionID"]
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_version: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description a plugin version identifier */
        version: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Request payload for fetching a plugin version. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            id: components["schemas"]["PluginVersionID"]
            semver: components["schemas"]["PluginVersion"]
            /** @description The git revision associated with this version. */
            git_revision: string
            /**
             * Format: date-time
             * @description When this version was submitted.
             */
            created_on: string
          }
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  login: {
    parameters: {
      query: {
        /** @description URL to redirect to after the login process is complete. */
        redirect_to: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Response payload for logging in with Steam. */
      303: {
        headers: {
          /** @description Steam's OpenID service */
          Location?: string
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /**
             * Format: uri
             * @description OpenID URL to redirect the user to so they can login.
             */
            openid_url: string
          }
        }
      }
    }
  }
  logout: {
    parameters: {
      query?: {
        /** @description Whether to invalidate all previous sessions, rather than just the
         *     current one. */
        invalidate_all_sessions?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          /** @description your cleared `kz-*` cookies */
          "Set-Cookies"?: string
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Gateway */
      502: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  verify_session: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: never
  }
}
