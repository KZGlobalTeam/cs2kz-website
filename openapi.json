{
  "openapi": "3.1.0",
  "info": {
    "title": "CS2KZ API",
    "description": "",
    "contact": {
      "name": "AlphaKeks",
      "email": "alphakeks@dawn.sh"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    },
    "version": "0.0.0-dev"
  },
  "servers": [
    {
      "url": "https://api.cs2kz.org"
    }
  ],
  "paths": {
    "/leaderboards/rating": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Global Player Rating Leaderboard",
        "description": "This endpoint returns the highest rated players in KZ.",
        "operationId": "get_rating_leaderboard",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_100_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingLeaderboard"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboards/records/{leaderboard}": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Global World Record Leaderboard",
        "description": "This endpoint returns the players with the most World Records.",
        "operationId": "get_records_leaderboard",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "description": "Only count records for a specific mode",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Mode"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_100_1000"
            }
          },
          {
            "name": "leaderboard",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Leaderboard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordsLeaderboard"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/records": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Records",
        "description": "This endpoint returns the latest records.",
        "operationId": "get_records",
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "description": "Only include records set by this player",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PlayerId"
            }
          },
          {
            "name": "course",
            "in": "query",
            "description": "Only include records set on this course",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CourseId"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Only include records set on this mode",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Mode"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "Only include PBs",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pro",
            "in": "query",
            "description": "Only include PRO records",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_100_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse_Record"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/records/{record_id}": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Records by ID",
        "description": "This endpoint returns a specific record by its API-assigned ID.",
        "operationId": "get_record",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RecordId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Record"
                }
              }
            }
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        }
      }
    },
    "/maps": {
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Map Submission",
        "description": "This endpoint can be used to submit KZ maps to the API. All maps must be\nuploaded to Steam's Community Workshop and the API will source their name\nfrom there. If you plan on submitting your map for approval, make sure it\nfollows [the rules].\n\n[the rules]: https://docs.cs2kz.org/mapping/approval#rules",
        "operationId": "create_map",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMapResponse"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": "map properties conflict with existing map(s) or are logically invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/maps/{game}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Global KZ Maps",
        "description": "This endpoint returns the latest KZ maps.",
        "operationId": "get_maps",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Only include maps with a matching name\n\nIf this parameter is specified, the returned maps will be ordered by how\nclose their actual name matches the given value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "game",
            "in": "query",
            "description": "Only include maps made for this game",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Game"
                }
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Only include maps in this state",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/MapState"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_1000_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse_Map"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/maps/{map_id}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Global KZ Maps by ID",
        "description": "This endpoint returns a specific KZ map by its API-assigned ID.",
        "operationId": "get_map",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MapId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Maps"
        ],
        "summary": "Update your Map",
        "description": "This endpoint can be used to make the API aware of changes to your map as\nwell as update metadata such as mapper information or descriptions. If your\nmap is currently work-in-progress and you uploaded a new version to Steam's\nCommunity Workshop, you must send a request to this endpoint to make the API\naware of it.",
        "operationId": "update_map",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MapId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "409": {
            "description": "map properties conflict with existing map(s) or are logically invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "update-maps"
            ]
          }
        ]
      }
    },
    "/maps/{map_id}/state": {
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Update a map's state",
        "description": "This endpoint can be used by the Map Approval Team to approve or reject\nsubmitted maps.",
        "operationId": "update_map_state",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MapId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMapStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "409": {
            "description": "map properties conflict with existing map(s) or are logically invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "update-maps"
            ]
          }
        ]
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Global KZ Servers",
        "description": "This endpoints returns KZ servers registered with the API. Servers which are\ncurrently online and connected to the API will contain a `connection_info`\nobject with real-time information about the map they're currently hosting\nand who's playing on them.",
        "operationId": "get_servers",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Only include servers with a matching name\n\nIf this parameter is specified, the returned servers will be ordered by\nhow close their actual name matches the given value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "Only include servers with a matching hostname / IP",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "game",
            "in": "query",
            "description": "Only include servers for the specified game",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Game"
            }
          },
          {
            "name": "owned_by",
            "in": "query",
            "description": "Only include servers owned by the specified user",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          },
          {
            "name": "include_degloballed",
            "in": "query",
            "description": "Include servers that currently don't have an API key",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_100_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse_Server"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Servers"
        ],
        "summary": "Register your KZ server",
        "description": "This endpoint can be used to register KZ servers with the API. If you are\na server owner, please make sure your server follows [the rules].\n\n[the rules]: https://docs.cs2kz.org/servers/approval#rules",
        "operationId": "create_server",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServerResponse"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": "server properties conflict with existing server(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/servers/{server_id}": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Global KZ Servers by ID",
        "description": "Returns a specific KZ server by its API-assigned ID.",
        "operationId": "get_server",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            }
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Servers"
        ],
        "summary": "Update your KZ Server",
        "description": "This endpoint can be used by server owners to update the metadata of their\nservers, such as IP/port.",
        "operationId": "update_server",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "409": {
            "description": "server properties conflict with existing server(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "modify-server-metadata"
            ]
          }
        ]
      }
    },
    "/servers/{server_id}/access-key": {
      "put": {
        "tags": [
          "Servers"
        ],
        "summary": "Generate a new access key",
        "description": "This endpoint can be used by server owners and admins to generate a new\naccess key for a server. This immediately invalidates the old key and cuts\noff the server if it is currently connected to the API.",
        "operationId": "reset_server_access_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerId"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetServerAccessKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "session_auth": [
              "reset-server-access-keys"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Servers"
        ],
        "summary": "Delete a server's API key",
        "description": "This endpoint can be used by admins to delete a server's API key. This\nimmediately invalidates it and cuts off the server if it is currently\nconnected to the API.",
        "operationId": "delete_server_access_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ServerId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "session_auth": [
              "delete-server-access-keys"
            ]
          }
        ]
      }
    },
    "/bans": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Player Bans",
        "description": "This endpoint returns the latest player bans created by `POST /bans`.",
        "operationId": "get_bans",
        "parameters": [
          {
            "name": "player_id",
            "in": "query",
            "description": "Only include bans for this player",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PlayerId"
            }
          },
          {
            "name": "banned_by",
            "in": "query",
            "description": "Only include bans issued by this admin",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_100_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse_Ban"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bans"
        ],
        "summary": "Ban a player",
        "description": "This endpoint can be used to restrict players from submitting records or\njumpstats to the API. Servers will also be informed about banned players\nwhen they join.",
        "operationId": "create_ban",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBanResponse"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": "the player does not exist or is already banned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "create-bans"
            ]
          }
        ]
      }
    },
    "/bans/{ban_id}": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Player Bans by ID",
        "description": "This endpoint returns information about a specific ban.",
        "operationId": "get_ban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BanId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ban"
                }
              }
            }
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        }
      },
      "delete": {
        "tags": [
          "Bans"
        ],
        "summary": "Revert a Ban",
        "description": "This endpoint can be used to revert a ban (\"unban\" a player). Only active\nbans can be reverted and a player can only have one active ban at a time.",
        "operationId": "revert_ban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BanId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevertBanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "409": {
            "description": "the ban cannot be reverted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "revert-bans"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Bans"
        ],
        "summary": "Update an existing Ban",
        "description": "This endpoint can be used to update the details of a ban, such as the ban\nreason or duration.\n\n**Do not use this endpoint to revert bans! Use `DELETE /bans/{ban_id}`\ninstead.**",
        "operationId": "update_ban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BanId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "update-bans"
            ]
          }
        ]
      }
    },
    "/players": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "KZ Players",
        "description": "This endpoint returns information about players who have joined KZ servers\nbefore.",
        "operationId": "get_players",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Only include players with a matching name\n\nIf this parameter is specified, the returned players will be ordered by\nhow close their actual name matches the given value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_100_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse_Player"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/players/{player_id}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "KZ Players by SteamID",
        "description": "This endpoint returns a specific player by their SteamID.",
        "operationId": "get_player",
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        }
      }
    },
    "/players/{player_id}/preferences": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Player Preferences",
        "description": "This endpoint returns the in-game preferences of a specific player.",
        "operationId": "get_player_preferences",
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerId"
            }
          },
          {
            "name": "game",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Game"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPreferences"
                }
              }
            }
          },
          "400": {
            "description": "invalid path/query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Players"
        ],
        "summary": "Update Player Preferences",
        "description": "This endpoint can be used to update your in-game preferences without joining\na server and doing it manually there.",
        "operationId": "update_player_preferences",
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlayerId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlayerPreferencesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "API Users",
        "description": "This endpoint returns information about users that have logged into the API\nbefore.",
        "operationId": "get_users",
        "parameters": [
          {
            "name": "has_permissions",
            "in": "query",
            "description": "Only include users that have permissions",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "permissions",
            "in": "query",
            "description": "Only include users with *at least* these permissions",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_100_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse_User"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "API Users by SteamID",
        "description": "This endpoint returns information about a specific user by their SteamID.",
        "operationId": "get_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        }
      }
    },
    "/users/{user_id}/email": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update your Email address",
        "description": "This endpoint can be used to update your email address. The API will use\nthis for sending notifications, for example if you are a server owner.",
        "operationId": "update_user_email",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete your Email address",
        "description": "This endpoint can be used to completely delete your email address from the\nAPI. It will no longer be able to send you notifications anymore.",
        "operationId": "delete_user_email",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/users/{user_id}/permissions": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's permissions",
        "description": "This endpoint can be used to edit other users' permissions.",
        "operationId": "update_user_permissions",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPermissionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "modify-user-permissions"
            ]
          }
        ]
      }
    },
    "/users/{user_id}/server-budget": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's server budget",
        "description": "This endpoint can be used to set a user's server budget (how many servers\nthey are allowed to create).",
        "operationId": "update_user_server_budget",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServerBudgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "session_auth": [
              "modify-server-budgets"
            ]
          }
        ]
      }
    },
    "/mappers/{user_id}": {
      "put": {
        "tags": [
          "Mappers"
        ],
        "summary": "Mark a user as a mapper",
        "description": "This endpoint can be used to mark a user as a \"mapper\". This will allow them\nto use the `PUT /maps` endpoint.",
        "operationId": "create_mapper",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "session_auth": [
              "grant-create-maps"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Mappers"
        ],
        "summary": "Mark a user as a non-mapper",
        "description": "This endpoint can be used to mark a user as not a \"mapper\". This will\nprevent them from using the `PUT /maps` endpoint.",
        "operationId": "delete_mapper",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "invalid path parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "session_auth": [
              "grant-create-maps"
            ]
          }
        ]
      }
    },
    "/auth/web/login": {
      "get": {
        "tags": [
          "User Authentication"
        ],
        "summary": "Login with Steam",
        "description": "This endpoint will redirect you to Steam for login.",
        "operationId": "web_login",
        "parameters": [
          {
            "name": "return_to",
            "in": "query",
            "description": "The URL to return to after the login process is complete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "redirect to Steam's login page"
          }
        }
      }
    },
    "/auth/web/logout": {
      "get": {
        "tags": [
          "User Authentication"
        ],
        "summary": "Logout",
        "description": "This endpoint can be used to delete your current, and optionally all other,\nactive session(s).",
        "operationId": "web_logout",
        "parameters": [
          {
            "name": "invalidate_all",
            "in": "query",
            "description": "Whether to invalidate all your currently active sessions",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "you are not logged in"
          }
        },
        "security": [
          {
            "session_auth": []
          }
        ]
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Real-Time events",
        "description": "Returns an [SSE] response.\n\n[SSE]: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",
        "operationId": "events",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        }
      }
    },
    "/plugin/versions": {
      "get": {
        "tags": [
          "Plugin"
        ],
        "summary": "GOKZ/cs2kz-metamod versions",
        "description": "This endpoints returns metadata about official releases of the GOKZ and\ncs2kz-metamod projects.",
        "operationId": "get_plugin_versions",
        "parameters": [
          {
            "name": "game",
            "in": "query",
            "description": "Only include plugin versions for the specified game",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Game"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results returned",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit_10_1000"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationResponse_PluginVersionInfo"
                }
              }
            }
          },
          "400": {
            "description": "invalid query parameter(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plugin"
        ],
        "summary": "Register a new GOKZ/cs2kz-metamod version",
        "description": "This endpoint is used by GitHub CI to inform the API of new plugin versions.",
        "operationId": "create_plugin_version",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePluginVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccessKey": {
        "type": "string",
        "format": "ulid",
        "description": "An API access key\n\nSee the [module-level documentation] for more information.\n\n[module-level documentation]: crate::access_keys",
        "example": "bf631097-05fa-439c-8538-e471874f03ba"
      },
      "Ban": {
        "type": "object",
        "required": [
          "id",
          "player",
          "reason",
          "banned_by",
          "created_at",
          "expires_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/BanId"
          },
          "player": {
            "$ref": "#/components/schemas/BannedPlayer"
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          },
          "banned_by": {
            "$ref": "#/components/schemas/BannedBy"
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "expires_at": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "unban": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Unban"
              }
            ]
          }
        }
      },
      "BanId": {
        "type": "integer",
        "format": "u-int32",
        "minimum": 0
      },
      "BanReason": {
        "type": "string",
        "enum": [
          "macro",
          "autobhop",
          "autostrafe"
        ]
      },
      "BannedBy": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "server_id",
              "type"
            ],
            "properties": {
              "server_id": {
                "$ref": "#/components/schemas/ServerId"
              },
              "type": {
                "type": "string",
                "enum": [
                  "server"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "user_id",
              "type"
            ],
            "properties": {
              "user_id": {
                "$ref": "#/components/schemas/UserId"
              },
              "type": {
                "type": "string",
                "enum": [
                  "admin"
                ]
              }
            }
          }
        ]
      },
      "BannedPlayer": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerId"
          },
          "name": {
            "$ref": "#/components/schemas/PlayerName"
          }
        }
      },
      "Checksum": {
        "type": "string",
        "description": "an MD5 checksum",
        "examples": [
          "ba29b1da0f9c28e2a9e072aba46cf040"
        ],
        "maxLength": 32,
        "minLength": 32
      },
      "ConnectedPlayerInfo": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerId"
          },
          "name": {
            "$ref": "#/components/schemas/PlayerName"
          }
        }
      },
      "ConnectionInfo": {
        "type": "object",
        "required": [
          "current_map",
          "connected_players"
        ],
        "properties": {
          "current_map": {
            "type": "string"
          },
          "connected_players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedPlayerInfo"
            }
          }
        }
      },
      "Course": {
        "type": "object",
        "required": [
          "id",
          "local_id",
          "name",
          "description",
          "mappers",
          "filters"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CourseId",
            "description": "The course's ID chosen by the API\n\nThis is unique across all courses registered by the API."
          },
          "local_id": {
            "$ref": "#/components/schemas/CourseLocalId",
            "description": "The course's ID chosen by the mapper\n\nThis is unique across all courses within a map."
          },
          "name": {
            "$ref": "#/components/schemas/CourseName"
          },
          "description": {
            "$ref": "#/components/schemas/CourseDescription"
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mapper"
            }
          },
          "filters": {
            "$ref": "#/components/schemas/Filters"
          }
        }
      },
      "CourseDescription": {
        "type": "string",
        "example": "Main"
      },
      "CourseId": {
        "type": "integer",
        "format": "u-int16",
        "minimum": 0
      },
      "CourseInfo": {
        "type": "object",
        "required": [
          "id",
          "local_id",
          "name",
          "nub_tier",
          "pro_tier"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CourseId"
          },
          "local_id": {
            "$ref": "#/components/schemas/CourseLocalId"
          },
          "name": {
            "$ref": "#/components/schemas/CourseName"
          },
          "nub_tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "pro_tier": {
            "$ref": "#/components/schemas/Tier"
          }
        }
      },
      "CourseLocalId": {
        "type": "integer",
        "format": "u-int16",
        "minimum": 0
      },
      "CourseName": {
        "type": "string",
        "example": "Main"
      },
      "CreateBanRequest": {
        "type": "object",
        "required": [
          "player_id",
          "reason"
        ],
        "properties": {
          "player_id": {
            "$ref": "#/components/schemas/PlayerId"
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          },
          "expires_after": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Seconds"
              }
            ]
          }
        }
      },
      "CreateBanResponse": {
        "type": "object",
        "required": [
          "ban_id",
          "expires_at"
        ],
        "properties": {
          "ban_id": {
            "$ref": "#/components/schemas/BanId"
          },
          "expires_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "CreateCourseRequest": {
        "type": "object",
        "required": [
          "name",
          "mappers",
          "filters"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/CourseName"
          },
          "description": {
            "$ref": "#/components/schemas/CourseDescription"
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserId"
            },
            "uniqueItems": true
          },
          "filters": {
            "$ref": "#/components/schemas/CreateFiltersRequest"
          }
        }
      },
      "CreateFilterRequest": {
        "type": "object",
        "required": [
          "nub_tier",
          "pro_tier",
          "ranked"
        ],
        "properties": {
          "nub_tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "pro_tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked": {
            "type": "boolean"
          },
          "notes": {
            "$ref": "#/components/schemas/FilterNotes"
          }
        }
      },
      "CreateFiltersRequest": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "vnl",
              "ckz"
            ],
            "properties": {
              "vnl": {
                "$ref": "#/components/schemas/CreateFilterRequest"
              },
              "ckz": {
                "$ref": "#/components/schemas/CreateFilterRequest"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "kzt",
              "skz",
              "vnl"
            ],
            "properties": {
              "kzt": {
                "$ref": "#/components/schemas/CreateFilterRequest"
              },
              "skz": {
                "$ref": "#/components/schemas/CreateFilterRequest"
              },
              "vnl": {
                "$ref": "#/components/schemas/CreateFilterRequest"
              }
            }
          }
        ]
      },
      "CreateMapRequest": {
        "type": "object",
        "required": [
          "workshop_id",
          "game",
          "courses"
        ],
        "properties": {
          "workshop_id": {
            "$ref": "#/components/schemas/WorkshopId"
          },
          "description": {
            "$ref": "#/components/schemas/MapDescription"
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCourseRequest"
            }
          }
        },
        "example": {
          "courses": [
            {
              "filters": {
                "cs2": {
                  "ckz": {
                    "nub_tier": "easy",
                    "pro_tier": "medium",
                    "ranked": true
                  },
                  "vnl": {
                    "nub_tier": "medium",
                    "pro_tier": "advanced",
                    "ranked": true
                  }
                }
              },
              "mappers": [
                "76561198260657129"
              ],
              "name": "Main"
            },
            {
              "filters": {
                "cs2": {
                  "ckz": {
                    "nub_tier": "easy",
                    "pro_tier": "easy",
                    "ranked": true
                  },
                  "vnl": {
                    "nub_tier": "easy",
                    "pro_tier": "easy",
                    "ranked": true
                  }
                }
              },
              "mappers": [
                "76561198260657129"
              ],
              "name": "Garden"
            },
            {
              "filters": {
                "ckz": {
                  "nub_tier": "advanced",
                  "pro_tier": "advanced",
                  "ranked": true
                },
                "vnl": {
                  "nub_tier": "hard",
                  "pro_tier": "very-hard",
                  "ranked": true
                }
              },
              "mappers": [
                "76561198260657129"
              ],
              "name": "word's backyard"
            },
            {
              "filters": {
                "ckz": {
                  "nub_tier": "medium",
                  "pro_tier": "advanced",
                  "ranked": true
                },
                "vnl": {
                  "nub_tier": "very-hard",
                  "pro_tier": "death",
                  "ranked": true
                }
              },
              "mappers": [
                "76561198260657129"
              ],
              "name": "Old grotto (hard)"
            }
          ],
          "description": "KZ but in a GROTTO! Make your way through an obstacle course based in a cave.",
          "workshop_id": 3121168339
        }
      },
      "CreateMapResponse": {
        "type": "object",
        "required": [
          "map_id"
        ],
        "properties": {
          "map_id": {
            "$ref": "#/components/schemas/MapId"
          }
        }
      },
      "CreateModePluginVersionRequest": {
        "type": "object",
        "required": [
          "mode",
          "linux_checksum",
          "windows_checksum"
        ],
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "linux_checksum": {
            "$ref": "#/components/schemas/Checksum"
          },
          "windows_checksum": {
            "$ref": "#/components/schemas/Checksum"
          }
        }
      },
      "CreatePluginVersionRequest": {
        "type": "object",
        "required": [
          "version",
          "game",
          "git_revision",
          "linux_checksum",
          "windows_checksum",
          "is_cutoff",
          "modes",
          "styles"
        ],
        "properties": {
          "version": {
            "$ref": "#/components/schemas/PluginVersion",
            "description": "A SemVer version"
          },
          "game": {
            "$ref": "#/components/schemas/Game",
            "description": "Which game this plugin is for"
          },
          "git_revision": {
            "$ref": "#/components/schemas/GitRevision",
            "description": "The git revision associated with the release commit / tag"
          },
          "linux_checksum": {
            "$ref": "#/components/schemas/Checksum",
            "description": "Checksum of the plugin binary on Linux"
          },
          "windows_checksum": {
            "$ref": "#/components/schemas/Checksum",
            "description": "Checksum of the plugin binary on Windows"
          },
          "is_cutoff": {
            "type": "boolean",
            "description": "Whether this release invalidates all previous releases"
          },
          "modes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateModePluginVersionRequest"
            }
          },
          "styles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateStylePluginVersionRequest"
            }
          }
        }
      },
      "CreateServerRequest": {
        "type": "object",
        "required": [
          "name",
          "host",
          "port",
          "game"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ServerName"
          },
          "host": {
            "$ref": "#/components/schemas/ServerHost"
          },
          "port": {
            "$ref": "#/components/schemas/ServerPort"
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          }
        }
      },
      "CreateServerResponse": {
        "type": "object",
        "required": [
          "server_id",
          "access_key"
        ],
        "properties": {
          "server_id": {
            "$ref": "#/components/schemas/ServerId"
          },
          "access_key": {
            "$ref": "#/components/schemas/AccessKey"
          }
        }
      },
      "CreateStylePluginVersionRequest": {
        "type": "object",
        "required": [
          "style",
          "linux_checksum",
          "windows_checksum"
        ],
        "properties": {
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "linux_checksum": {
            "$ref": "#/components/schemas/Checksum"
          },
          "windows_checksum": {
            "$ref": "#/components/schemas/Checksum"
          }
        }
      },
      "EmailAddress": {
        "type": "string",
        "format": "email"
      },
      "Event": {
        "oneOf": [
          {
            "type": "object",
            "description": "`lag` - You missed events because you consumed them too slowly.",
            "required": [
              "skipped"
            ],
            "properties": {
              "skipped": {
                "type": "integer",
                "format": "u-int64",
                "description": "The number of events that were skipped",
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "description": "`map-created` - A new map has been submitted.",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/MapId",
                "description": "The ID of the map"
              },
              "name": {
                "$ref": "#/components/schemas/MapName",
                "description": "The name of the map"
              }
            }
          },
          {
            "type": "object",
            "description": "`map-approved` - A map has been accepted into the global map pool.",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/MapId",
                "description": "The ID of the map"
              }
            }
          },
          {
            "type": "object",
            "description": "`server-connected` - A server has connected to the API.",
            "required": [
              "id",
              "connection_info"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ServerId",
                "description": "The ID of the server"
              },
              "connection_info": {
                "$ref": "#/components/schemas/ConnectionInfo",
                "description": "Information about the connection"
              }
            }
          },
          {
            "type": "object",
            "description": "`server-disconnected` - A server has disconnected from the API.",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ServerId",
                "description": "The ID of the server"
              }
            }
          },
          {
            "type": "object",
            "description": "`player-join` - A player joined a server.",
            "required": [
              "server_id",
              "player"
            ],
            "properties": {
              "server_id": {
                "$ref": "#/components/schemas/ServerId",
                "description": "The ID of the server the player joined"
              },
              "player": {
                "$ref": "#/components/schemas/ConnectedPlayerInfo",
                "description": "The player that joined"
              }
            }
          },
          {
            "type": "object",
            "description": "`player-leave` - A player left a server.",
            "required": [
              "server_id",
              "player_id"
            ],
            "properties": {
              "server_id": {
                "$ref": "#/components/schemas/ServerId",
                "description": "The ID of the server the player left"
              },
              "player_id": {
                "$ref": "#/components/schemas/PlayerId",
                "description": "The ID of the player that left"
              }
            }
          },
          {
            "type": "object",
            "description": "`record-submitted` - A new record has been submitted.",
            "required": [
              "record_id"
            ],
            "properties": {
              "record_id": {
                "$ref": "#/components/schemas/RecordId",
                "description": "The ID of the record"
              }
            }
          }
        ],
        "description": "An API event"
      },
      "Filter": {
        "type": "object",
        "required": [
          "id",
          "nub_tier",
          "pro_tier",
          "ranked",
          "notes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/FilterId"
          },
          "nub_tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "pro_tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked": {
            "type": "boolean"
          },
          "notes": {
            "$ref": "#/components/schemas/FilterNotes"
          }
        }
      },
      "FilterId": {
        "type": "integer",
        "format": "u-int16",
        "minimum": 0
      },
      "FilterNotes": {
        "type": "string"
      },
      "Filters": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "vnl",
              "ckz"
            ],
            "properties": {
              "vnl": {
                "$ref": "#/components/schemas/Filter"
              },
              "ckz": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "kzt",
              "skz",
              "vnl"
            ],
            "properties": {
              "kzt": {
                "$ref": "#/components/schemas/Filter"
              },
              "skz": {
                "$ref": "#/components/schemas/Filter"
              },
              "vnl": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          }
        ]
      },
      "Game": {
        "type": "string",
        "description": "The two games supported by the API",
        "enum": [
          "cs2",
          "csgo"
        ]
      },
      "GitRevision": {
        "type": "string",
        "description": "a git revision",
        "examples": [
          "24bfd2242fc46340c95574468d78af687dea0e93"
        ],
        "maxLength": 40,
        "minLength": 40
      },
      "Leaderboard": {
        "type": "string",
        "enum": [
          "nub",
          "pro"
        ]
      },
      "Limit_1000_1000": {
        "type": "integer",
        "format": "u-int64",
        "default": 1000,
        "maximum": 1000
      },
      "Limit_100_1000": {
        "type": "integer",
        "format": "u-int64",
        "default": 100,
        "maximum": 1000
      },
      "Limit_10_1000": {
        "type": "integer",
        "format": "u-int64",
        "default": 10,
        "maximum": 1000
      },
      "Map": {
        "type": "object",
        "required": [
          "id",
          "workshop_id",
          "name",
          "description",
          "game",
          "state",
          "checksum",
          "courses",
          "created_by",
          "created_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MapId"
          },
          "workshop_id": {
            "$ref": "#/components/schemas/WorkshopId"
          },
          "name": {
            "$ref": "#/components/schemas/MapName"
          },
          "description": {
            "$ref": "#/components/schemas/MapDescription"
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "state": {
            "$ref": "#/components/schemas/MapState"
          },
          "checksum": {
            "$ref": "#/components/schemas/Checksum",
            "description": "A checksum of the map's `.vpk` file"
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Course"
            }
          },
          "created_by": {
            "$ref": "#/components/schemas/Mapper"
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "MapDescription": {
        "type": "string",
        "example": "Alpha's KZ"
      },
      "MapId": {
        "type": "integer",
        "format": "u-int16",
        "minimum": 0
      },
      "MapInfo": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MapId"
          },
          "name": {
            "$ref": "#/components/schemas/MapName"
          }
        }
      },
      "MapName": {
        "type": "string",
        "example": "kz_grotto"
      },
      "MapState": {
        "type": "string",
        "enum": [
          "graveyard",
          "wip",
          "pending",
          "approved",
          "completed"
        ]
      },
      "Mapper": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserId"
          },
          "name": {
            "$ref": "#/components/schemas/Username"
          }
        }
      },
      "Mode": {
        "type": "string",
        "description": "The different game modes across CS2 and CS:GO",
        "enum": [
          "vanilla-cs2",
          "classic",
          "kztimer",
          "simplekz",
          "vanilla-csgo"
        ]
      },
      "Offset": {
        "type": "integer",
        "format": "u-int64"
      },
      "PaginationResponse_Ban": {
        "type": "object",
        "required": [
          "total",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "player",
                "reason",
                "banned_by",
                "created_at",
                "expires_at"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/BanId"
                },
                "player": {
                  "$ref": "#/components/schemas/BannedPlayer"
                },
                "reason": {
                  "$ref": "#/components/schemas/BanReason"
                },
                "banned_by": {
                  "$ref": "#/components/schemas/BannedBy"
                },
                "created_at": {
                  "$ref": "#/components/schemas/Timestamp"
                },
                "expires_at": {
                  "$ref": "#/components/schemas/Timestamp"
                },
                "unban": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/Unban"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "PaginationResponse_Map": {
        "type": "object",
        "required": [
          "total",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "workshop_id",
                "name",
                "description",
                "game",
                "state",
                "checksum",
                "courses",
                "created_by",
                "created_at"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/MapId"
                },
                "workshop_id": {
                  "$ref": "#/components/schemas/WorkshopId"
                },
                "name": {
                  "$ref": "#/components/schemas/MapName"
                },
                "description": {
                  "$ref": "#/components/schemas/MapDescription"
                },
                "game": {
                  "$ref": "#/components/schemas/Game"
                },
                "state": {
                  "$ref": "#/components/schemas/MapState"
                },
                "checksum": {
                  "$ref": "#/components/schemas/Checksum",
                  "description": "A checksum of the map's `.vpk` file"
                },
                "courses": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                },
                "created_by": {
                  "$ref": "#/components/schemas/Mapper"
                },
                "created_at": {
                  "$ref": "#/components/schemas/Timestamp"
                }
              }
            }
          }
        }
      },
      "PaginationResponse_Player": {
        "type": "object",
        "required": [
          "total",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "rating",
                "created_at"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/PlayerId"
                },
                "name": {
                  "$ref": "#/components/schemas/PlayerName"
                },
                "rating": {
                  "$ref": "#/components/schemas/PlayerRating"
                },
                "created_at": {
                  "$ref": "#/components/schemas/Timestamp"
                }
              }
            }
          }
        }
      },
      "PaginationResponse_PluginVersionInfo": {
        "type": "object",
        "required": [
          "total",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "version",
                "git_revision",
                "created_at"
              ],
              "properties": {
                "version": {
                  "$ref": "#/components/schemas/PluginVersion",
                  "description": "A SemVer version."
                },
                "git_revision": {
                  "$ref": "#/components/schemas/GitRevision",
                  "description": "The git revision associated with the release commit / tag of this version."
                },
                "created_at": {
                  "$ref": "#/components/schemas/Timestamp",
                  "description": "When this version was published."
                }
              }
            }
          }
        }
      },
      "PaginationResponse_Record": {
        "type": "object",
        "required": [
          "total",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "player",
                "map",
                "course",
                "server",
                "mode",
                "styles",
                "time",
                "teleports",
                "created_at"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/RecordId"
                },
                "player": {
                  "$ref": "#/components/schemas/PlayerInfo"
                },
                "map": {
                  "$ref": "#/components/schemas/MapInfo"
                },
                "course": {
                  "$ref": "#/components/schemas/CourseInfo"
                },
                "server": {
                  "$ref": "#/components/schemas/ServerInfo"
                },
                "mode": {
                  "$ref": "#/components/schemas/Mode"
                },
                "styles": {
                  "$ref": "#/components/schemas/Styles"
                },
                "time": {
                  "$ref": "#/components/schemas/Time"
                },
                "teleports": {
                  "$ref": "#/components/schemas/Teleports"
                },
                "nub_points": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/Points"
                    }
                  ]
                },
                "nub_rank": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/Rank"
                    }
                  ]
                },
                "pro_points": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/Points"
                    }
                  ]
                },
                "pro_rank": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/Rank"
                    }
                  ]
                },
                "created_at": {
                  "$ref": "#/components/schemas/Timestamp"
                }
              }
            }
          }
        }
      },
      "PaginationResponse_Server": {
        "type": "object",
        "required": [
          "total",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "host",
                "port",
                "game",
                "owner",
                "is_global",
                "created_at"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/ServerId"
                },
                "name": {
                  "$ref": "#/components/schemas/ServerName"
                },
                "host": {
                  "$ref": "#/components/schemas/ServerHost"
                },
                "port": {
                  "$ref": "#/components/schemas/ServerPort"
                },
                "game": {
                  "$ref": "#/components/schemas/Game"
                },
                "owner": {
                  "$ref": "#/components/schemas/ServerOwner"
                },
                "is_global": {
                  "type": "boolean"
                },
                "connection_info": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/ConnectionInfo"
                    }
                  ]
                },
                "created_at": {
                  "$ref": "#/components/schemas/Timestamp"
                }
              }
            }
          }
        }
      },
      "PaginationResponse_User": {
        "type": "object",
        "required": [
          "total",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name",
                "permissions",
                "server_budget",
                "created_at"
              ],
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/UserId"
                },
                "name": {
                  "$ref": "#/components/schemas/Username"
                },
                "permissions": {
                  "$ref": "#/components/schemas/Permissions"
                },
                "server_budget": {
                  "$ref": "#/components/schemas/ServerBudget"
                },
                "created_at": {
                  "$ref": "#/components/schemas/Timestamp"
                }
              }
            }
          }
        }
      },
      "Permission": {
        "type": "string",
        "enum": [
          "create-maps",
          "update-maps",
          "modify-server-metadata",
          "modify-server-budgets",
          "reset-server-access-keys",
          "delete-server-access-keys",
          "create-bans",
          "update-bans",
          "revert-bans",
          "grant-create-maps",
          "modify-user-permissions"
        ]
      },
      "Permissions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Permission"
        },
        "description": "A set of [`Permission`]s"
      },
      "Player": {
        "type": "object",
        "required": [
          "id",
          "name",
          "rating",
          "created_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerId"
          },
          "name": {
            "$ref": "#/components/schemas/PlayerName"
          },
          "rating": {
            "$ref": "#/components/schemas/PlayerRating"
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "PlayerId": {
        "type": "string",
        "format": "u-int64",
        "example": "STEAM_1:1:161178172"
      },
      "PlayerInfo": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerId"
          },
          "name": {
            "$ref": "#/components/schemas/PlayerName"
          }
        }
      },
      "PlayerName": {
        "type": "string",
        "example": "AlphaKeks"
      },
      "PlayerPreferences": {
        "type": "object"
      },
      "PlayerRating": {
        "type": "number",
        "format": "double"
      },
      "PluginVersion": {
        "type": "string",
        "example": "1.23.456-dev"
      },
      "PluginVersionInfo": {
        "type": "object",
        "required": [
          "version",
          "git_revision",
          "created_at"
        ],
        "properties": {
          "version": {
            "$ref": "#/components/schemas/PluginVersion",
            "description": "A SemVer version."
          },
          "git_revision": {
            "$ref": "#/components/schemas/GitRevision",
            "description": "The git revision associated with the release commit / tag of this version."
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp",
            "description": "When this version was published."
          }
        }
      },
      "Points": {
        "type": "number",
        "format": "double"
      },
      "ProblemDetails": {
        "type": "object",
        "format": "rfc-9457",
        "description": "RFC 9457 - Problem Details for HTTP APIs",
        "required": [
          "type",
          "status",
          "title"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "https://docs.cs2kz.org/api/problems/invalid-path-parameters",
              "https://docs.cs2kz.org/api/problems/invalid-query-parameters",
              "https://docs.cs2kz.org/api/problems/missing-header",
              "https://docs.cs2kz.org/api/problems/invalid-header",
              "https://docs.cs2kz.org/api/problems/deserialize-request-body",
              "https://docs.cs2kz.org/api/problems/server-name-already-in-use",
              "https://docs.cs2kz.org/api/problems/server-host-and-port-already-in-use",
              "https://docs.cs2kz.org/api/problems/invalid-map-id",
              "https://docs.cs2kz.org/api/problems/invalid-map-name",
              "https://docs.cs2kz.org/api/problems/invalid-mapper-id",
              "https://docs.cs2kz.org/api/problems/invalid-mapper-name",
              "https://docs.cs2kz.org/api/problems/invalid-course-id",
              "https://docs.cs2kz.org/api/problems/map-is-frozen",
              "https://docs.cs2kz.org/api/problems/inconsistent-filters",
              "https://docs.cs2kz.org/api/problems/unknown-player-to-ban",
              "https://docs.cs2kz.org/api/problems/player-already-banned",
              "https://docs.cs2kz.org/api/problems/ban-expires-in-the-past",
              "https://docs.cs2kz.org/api/problems/ban-already-expired",
              "https://docs.cs2kz.org/api/problems/ban-already-reverted",
              "https://docs.cs2kz.org/api/problems/plugin-version-already-exists",
              "https://docs.cs2kz.org/api/problems/plugin-version-is-older-than-latest",
              "https://docs.cs2kz.org/api/problems/steam-api-error"
            ],
            "examples": [
              "https://docs.cs2kz.org/api/problems/deserialize-request-body"
            ]
          },
          "status": {
            "type": "integer",
            "format": "u-int16",
            "minimum": 0
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        },
        "additionalProperties": true,
        "examples": [
          {
            "detail": "request body is invalid",
            "status": 422,
            "title": "something went wrong",
            "type": "https://docs.cs2kz.org/api/problems/deserialize-request-body"
          }
        ]
      },
      "Rank": {
        "type": "integer",
        "format": "u-int64",
        "description": "A 0-indexed position on a leaderboard",
        "minimum": 0
      },
      "RatingLeaderboard": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RatingLeaderboardEntry"
        }
      },
      "RatingLeaderboardEntry": {
        "type": "object",
        "required": [
          "id",
          "name",
          "rating"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerId"
          },
          "name": {
            "$ref": "#/components/schemas/PlayerName"
          },
          "rating": {
            "$ref": "#/components/schemas/PlayerRating"
          }
        }
      },
      "Record": {
        "type": "object",
        "required": [
          "id",
          "player",
          "map",
          "course",
          "server",
          "mode",
          "styles",
          "time",
          "teleports",
          "created_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/RecordId"
          },
          "player": {
            "$ref": "#/components/schemas/PlayerInfo"
          },
          "map": {
            "$ref": "#/components/schemas/MapInfo"
          },
          "course": {
            "$ref": "#/components/schemas/CourseInfo"
          },
          "server": {
            "$ref": "#/components/schemas/ServerInfo"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "styles": {
            "$ref": "#/components/schemas/Styles"
          },
          "time": {
            "$ref": "#/components/schemas/Time"
          },
          "teleports": {
            "$ref": "#/components/schemas/Teleports"
          },
          "nub_points": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Points"
              }
            ]
          },
          "nub_rank": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Rank"
              }
            ]
          },
          "pro_points": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Points"
              }
            ]
          },
          "pro_rank": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Rank"
              }
            ]
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "RecordId": {
        "type": "integer",
        "format": "u-int32",
        "minimum": 0
      },
      "RecordsLeaderboard": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RecordsLeaderboardEntry"
        }
      },
      "RecordsLeaderboardEntry": {
        "type": "object",
        "required": [
          "id",
          "name",
          "records"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PlayerId"
          },
          "name": {
            "$ref": "#/components/schemas/PlayerName"
          },
          "records": {
            "type": "integer",
            "format": "u-int64",
            "minimum": 0
          }
        }
      },
      "ResetServerAccessKeyResponse": {
        "type": "object",
        "required": [
          "access_key"
        ],
        "properties": {
          "access_key": {
            "$ref": "#/components/schemas/AccessKey"
          }
        }
      },
      "RevertBanRequest": {
        "type": "object",
        "required": [
          "reason"
        ],
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/UnbanReason"
          }
        }
      },
      "Seconds": {
        "type": "number",
        "format": "double",
        "description": "A duration in seconds"
      },
      "Server": {
        "type": "object",
        "required": [
          "id",
          "name",
          "host",
          "port",
          "game",
          "owner",
          "is_global",
          "created_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ServerId"
          },
          "name": {
            "$ref": "#/components/schemas/ServerName"
          },
          "host": {
            "$ref": "#/components/schemas/ServerHost"
          },
          "port": {
            "$ref": "#/components/schemas/ServerPort"
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "owner": {
            "$ref": "#/components/schemas/ServerOwner"
          },
          "is_global": {
            "type": "boolean"
          },
          "connection_info": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ConnectionInfo"
              }
            ]
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "ServerBudget": {
        "type": "integer",
        "format": "u-int16",
        "description": "A user's server budget\n\nThis indicates how many servers they are still allowed to create.",
        "minimum": 0
      },
      "ServerHost": {
        "oneOf": [
          {
            "type": "string",
            "format": "ipv4"
          },
          {
            "type": "string",
            "format": "ipv6"
          },
          {
            "type": "string",
            "format": "hostname"
          }
        ]
      },
      "ServerId": {
        "type": "integer",
        "format": "u-int16",
        "minimum": 0
      },
      "ServerInfo": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ServerId"
          },
          "name": {
            "$ref": "#/components/schemas/ServerName"
          }
        }
      },
      "ServerName": {
        "type": "string",
        "example": "Alpha's KZ"
      },
      "ServerOwner": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserId"
          },
          "name": {
            "$ref": "#/components/schemas/Username"
          }
        }
      },
      "ServerPort": {
        "type": "integer",
        "format": "u-int16",
        "example": 27015,
        "minimum": 0
      },
      "Style": {
        "type": "string",
        "enum": [
          "auto-bhop"
        ]
      },
      "Styles": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Style"
        },
        "description": "A set of [`Style`]s"
      },
      "Teleports": {
        "type": "integer",
        "format": "u-int32",
        "minimum": 0
      },
      "Tier": {
        "type": "string",
        "enum": [
          "very-easy",
          "easy",
          "medium",
          "advanced",
          "hard",
          "very-hard",
          "extreme",
          "death",
          "unfeasible",
          "impossible"
        ]
      },
      "Time": {
        "$ref": "#/components/schemas/Seconds"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "Unban": {
        "type": "object",
        "required": [
          "reason",
          "unbanned_by",
          "created_at"
        ],
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/UnbanReason"
          },
          "unbanned_by": {
            "$ref": "#/components/schemas/UserId"
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "UnbanReason": {
        "type": "string"
      },
      "UpdateBanRequest": {
        "type": "object",
        "properties": {
          "reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BanReason"
              }
            ]
          },
          "expires_after": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Seconds"
              }
            ]
          }
        }
      },
      "UpdateCourseRequest": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CourseName",
                "description": "A new name"
              }
            ]
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/CourseDescription",
                "description": "A new description"
              }
            ]
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserId"
            },
            "description": "A list of SteamIDs to add as mappers",
            "uniqueItems": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserId"
            },
            "description": "A list of SteamIDs to remove as mappers",
            "uniqueItems": true
          },
          "filter_updates": {
            "type": "object",
            "description": "Updates to the course's filters",
            "additionalProperties": {
              "$ref": "#/components/schemas/UpdateFiltersRequest"
            },
            "propertyNames": {
              "type": "string",
              "description": "The different game modes across CS2 and CS:GO",
              "enum": [
                "vanilla-cs2",
                "classic",
                "kztimer",
                "simplekz",
                "vanilla-csgo"
              ]
            }
          }
        }
      },
      "UpdateFiltersRequest": {
        "type": "object",
        "properties": {
          "nub_tier": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Tier",
                "description": "A new NUB tier"
              }
            ]
          },
          "pro_tier": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Tier",
                "description": "A new PRO tier"
              }
            ]
          },
          "ranked": {
            "type": [
              "boolean",
              "null"
            ],
            "description": "Whether the filter should contribute to player rating"
          },
          "notes": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FilterNotes",
                "description": "Any additional notes"
              }
            ]
          }
        }
      },
      "UpdateMapRequest": {
        "type": "object",
        "required": [
          "workshop_id"
        ],
        "properties": {
          "workshop_id": {
            "$ref": "#/components/schemas/WorkshopId",
            "description": "The ID of the map on the Steam Workshop"
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MapDescription",
                "description": "A new description"
              }
            ]
          },
          "course_updates": {
            "type": "object",
            "description": "Updates for the map's courses",
            "additionalProperties": {
              "$ref": "#/components/schemas/UpdateCourseRequest"
            },
            "propertyNames": {
              "type": "integer",
              "format": "u-int16",
              "minimum": 0
            }
          }
        }
      },
      "UpdateMapStateRequest": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "$ref": "#/components/schemas/MapState"
          }
        }
      },
      "UpdatePlayerPreferencesRequest": {
        "type": "object",
        "required": [
          "game",
          "preferences"
        ],
        "properties": {
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "preferences": {
            "$ref": "#/components/schemas/PlayerPreferences"
          }
        }
      },
      "UpdateServerBudgetRequest": {
        "type": "object",
        "required": [
          "budget"
        ],
        "properties": {
          "budget": {
            "$ref": "#/components/schemas/ServerBudget"
          }
        }
      },
      "UpdateServerRequest": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ServerName"
              }
            ]
          },
          "host": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ServerHost"
              }
            ]
          },
          "port": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/ServerPort"
              }
            ]
          },
          "game": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Game"
              }
            ]
          }
        }
      },
      "UpdateUserEmailRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "$ref": "#/components/schemas/EmailAddress"
          }
        }
      },
      "UpdateUserPermissionsRequest": {
        "type": "object",
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "permissions",
          "server_budget",
          "created_at"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UserId"
          },
          "name": {
            "$ref": "#/components/schemas/Username"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "server_budget": {
            "$ref": "#/components/schemas/ServerBudget"
          },
          "created_at": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "UserId": {
        "type": "string",
        "format": "u-int64",
        "example": "76561198282622073"
      },
      "Username": {
        "type": "string",
        "example": "AlphaKeks"
      },
      "WorkshopId": {
        "type": "integer",
        "format": "u-int32",
        "minimum": 0
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "http",
        "scheme": "bearer"
      },
      "session_auth": {
        "type": "apiKey",
        "in": "header",
        "name": "kz-auth"
      }
    }
  },
  "tags": [
    {
      "name": "Leaderboards"
    },
    {
      "name": "Records"
    },
    {
      "name": "Maps"
    },
    {
      "name": "Servers"
    },
    {
      "name": "Bans"
    },
    {
      "name": "Players"
    },
    {
      "name": "Users"
    },
    {
      "name": "Mappers"
    },
    {
      "name": "User Authentication",
      "description": "OpenID 2.0 authentication with Steam"
    },
    {
      "name": "Events",
      "description": "Real-Time events via SSE"
    },
    {
      "name": "Plugin",
      "description": "GOKZ/cs2kz-metamod"
    }
  ],
  "externalDocs": {
    "url": "https://docs.cs2kz.org/api",
    "description": "High-Level documentation"
  }
}
