/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/leaderboards/rating': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Global Player Rating Leaderboard
     * @description This endpoint returns the highest rated players in KZ.
     */
    get: operations['get_rating_leaderboard']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/leaderboards/records/{leaderboard}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Global World Record Leaderboard
     * @description This endpoint returns the players with the most World Records.
     */
    get: operations['get_records_leaderboard']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/records': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Records
     * @description This endpoint returns the latest records.
     */
    get: operations['get_records']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/records/{record_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Records by ID
     * @description This endpoint returns a specific record by its API-assigned ID.
     */
    get: operations['get_record']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/maps': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Map Submission
     * @description This endpoint can be used to submit KZ maps to the API. All maps must be
     *     uploaded to Steam's Community Workshop and the API will source their name
     *     from there. If you plan on submitting your map for approval, make sure it
     *     follows [the rules].
     *
     *     [the rules]: https://docs.cs2kz.org/mapping/approval#rules
     */
    put: operations['create_map']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/maps/{game}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Global KZ Maps
     * @description This endpoint returns the latest KZ maps.
     */
    get: operations['get_maps']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/maps/{map_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Global KZ Maps by ID
     * @description This endpoint returns a specific KZ map by its API-assigned ID.
     */
    get: operations['get_map']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update your Map
     * @description This endpoint can be used to make the API aware of changes to your map as
     *     well as update metadata such as mapper information or descriptions. If your
     *     map is currently work-in-progress and you uploaded a new version to Steam's
     *     Community Workshop, you must send a request to this endpoint to make the API
     *     aware of it.
     */
    patch: operations['update_map']
    trace?: never
  }
  '/maps/{map_id}/state': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a map's state
     * @description This endpoint can be used by the Map Approval Team to approve or reject
     *     submitted maps.
     */
    put: operations['update_map_state']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Global KZ Servers
     * @description This endpoints returns KZ servers registered with the API. Servers which are
     *     currently online and connected to the API will contain a `connection_info`
     *     object with real-time information about the map they're currently hosting
     *     and who's playing on them.
     */
    get: operations['get_servers']
    put?: never
    /**
     * Register your KZ server
     * @description This endpoint can be used to register KZ servers with the API. If you are
     *     a server owner, please make sure your server follows [the rules].
     *
     *     [the rules]: https://docs.cs2kz.org/servers/approval#rules
     */
    post: operations['create_server']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/servers/{server_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Global KZ Servers by ID
     * @description Returns a specific KZ server by its API-assigned ID.
     */
    get: operations['get_server']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update your KZ Server
     * @description This endpoint can be used by server owners to update the metadata of their
     *     servers, such as IP/port.
     */
    patch: operations['update_server']
    trace?: never
  }
  '/servers/{server_id}/access-key': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Generate a new access key
     * @description This endpoint can be used by server owners and admins to generate a new
     *     access key for a server. This immediately invalidates the old key and cuts
     *     off the server if it is currently connected to the API.
     */
    put: operations['reset_server_access_key']
    post?: never
    /**
     * Delete a server's API key
     * @description This endpoint can be used by admins to delete a server's API key. This
     *     immediately invalidates it and cuts off the server if it is currently
     *     connected to the API.
     */
    delete: operations['delete_server_access_key']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bans': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Player Bans
     * @description This endpoint returns the latest player bans created by `POST /bans`.
     */
    get: operations['get_bans']
    put?: never
    /**
     * Ban a player
     * @description This endpoint can be used to restrict players from submitting records or
     *     jumpstats to the API. Servers will also be informed about banned players
     *     when they join.
     */
    post: operations['create_ban']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bans/{ban_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Player Bans by ID
     * @description This endpoint returns information about a specific ban.
     */
    get: operations['get_ban']
    put?: never
    post?: never
    /**
     * Revert a Ban
     * @description This endpoint can be used to revert a ban ("unban" a player). Only active
     *     bans can be reverted and a player can only have one active ban at a time.
     */
    delete: operations['revert_ban']
    options?: never
    head?: never
    /**
     * Update an existing Ban
     * @description This endpoint can be used to update the details of a ban, such as the ban
     *     reason or duration.
     *
     *     **Do not use this endpoint to revert bans! Use `DELETE /bans/{ban_id}`
     *     instead.**
     */
    patch: operations['update_ban']
    trace?: never
  }
  '/players': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * KZ Players
     * @description This endpoint returns information about players who have joined KZ servers
     *     before.
     */
    get: operations['get_players']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/players/{player_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * KZ Players by SteamID
     * @description This endpoint returns a specific player by their SteamID.
     */
    get: operations['get_player']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/players/{player_id}/preferences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Player Preferences
     * @description This endpoint returns the in-game preferences of a specific player.
     */
    get: operations['get_player_preferences']
    /**
     * Update Player Preferences
     * @description This endpoint can be used to update your in-game preferences without joining
     *     a server and doing it manually there.
     */
    put: operations['update_player_preferences']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * API Users
     * @description This endpoint returns information about users that have logged into the API
     *     before.
     */
    get: operations['get_users']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{user_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * API Users by SteamID
     * @description This endpoint returns information about a specific user by their SteamID.
     */
    get: operations['get_user']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{user_id}/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update your Email address
     * @description This endpoint can be used to update your email address. The API will use
     *     this for sending notifications, for example if you are a server owner.
     */
    put: operations['update_user_email']
    post?: never
    /**
     * Delete your Email address
     * @description This endpoint can be used to completely delete your email address from the
     *     API. It will no longer be able to send you notifications anymore.
     */
    delete: operations['delete_user_email']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{user_id}/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a user's permissions
     * @description This endpoint can be used to edit other users' permissions.
     */
    put: operations['update_user_permissions']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/users/{user_id}/server-budget': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a user's server budget
     * @description This endpoint can be used to set a user's server budget (how many servers
     *     they are allowed to create).
     */
    put: operations['update_user_server_budget']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mappers/{user_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Mark a user as a mapper
     * @description This endpoint can be used to mark a user as a "mapper". This will allow them
     *     to use the `PUT /maps` endpoint.
     */
    put: operations['create_mapper']
    post?: never
    /**
     * Mark a user as a non-mapper
     * @description This endpoint can be used to mark a user as not a "mapper". This will
     *     prevent them from using the `PUT /maps` endpoint.
     */
    delete: operations['delete_mapper']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/web/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Login with Steam
     * @description This endpoint will redirect you to Steam for login.
     */
    get: operations['web_login']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/web/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Logout
     * @description This endpoint can be used to delete your current, and optionally all other,
     *     active session(s).
     */
    get: operations['web_logout']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Real-Time events
     * @description Returns an [SSE] response.
     *
     *     [SSE]: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events
     */
    get: operations['events']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/plugin/versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * GOKZ/cs2kz-metamod versions
     * @description This endpoints returns metadata about official releases of the GOKZ and
     *     cs2kz-metamod projects.
     */
    get: operations['get_plugin_versions']
    put?: never
    /**
     * Register a new GOKZ/cs2kz-metamod version
     * @description This endpoint is used by GitHub CI to inform the API of new plugin versions.
     */
    post: operations['create_plugin_version']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * Format: ulid
     * @description An API access key
     *
     *     See the [module-level documentation] for more information.
     *
     *     [module-level documentation]: crate::access_keys
     * @example bf631097-05fa-439c-8538-e471874f03ba
     */
    AccessKey: string
    Ban: {
      id: components['schemas']['BanId']
      player: components['schemas']['BannedPlayer']
      reason: components['schemas']['BanReason']
      banned_by: components['schemas']['BannedBy']
      created_at: components['schemas']['Timestamp']
      expires_at: components['schemas']['Timestamp']
      unban?: null | components['schemas']['Unban']
    }
    /** Format: u-int32 */
    BanId: number
    /** @enum {string} */
    BanReason: 'macro' | 'autobhop' | 'autostrafe'
    BannedBy:
      | {
          server_id: components['schemas']['ServerId']
          /** @enum {string} */
          type: 'server'
        }
      | {
          user_id: components['schemas']['UserId']
          /** @enum {string} */
          type: 'admin'
        }
    BannedPlayer: {
      id: components['schemas']['PlayerId']
      name: components['schemas']['PlayerName']
    }
    /** @description an MD5 checksum */
    Checksum: string
    ConnectedPlayerInfo: {
      id: components['schemas']['PlayerId']
      name: components['schemas']['PlayerName']
    }
    ConnectionInfo: {
      current_map: string
      connected_players: components['schemas']['ConnectedPlayerInfo'][]
    }
    Course: {
      /** @description The course's ID chosen by the API
       *
       *     This is unique across all courses registered by the API. */
      id: components['schemas']['CourseId']
      /** @description The course's ID chosen by the mapper
       *
       *     This is unique across all courses within a map. */
      local_id: components['schemas']['CourseLocalId']
      name: components['schemas']['CourseName']
      description: components['schemas']['CourseDescription']
      mappers: components['schemas']['Mapper'][]
      filters: components['schemas']['Filters']
    }
    /** @example Main */
    CourseDescription: string
    /** Format: u-int16 */
    CourseId: number
    CourseInfo: {
      id: components['schemas']['CourseId']
      local_id: components['schemas']['CourseLocalId']
      name: components['schemas']['CourseName']
      nub_tier: components['schemas']['Tier']
      pro_tier: components['schemas']['Tier']
    }
    /** Format: u-int16 */
    CourseLocalId: number
    /** @example Main */
    CourseName: string
    CreateBanRequest: {
      player_id: components['schemas']['PlayerId']
      reason: components['schemas']['BanReason']
      expires_after?: null | components['schemas']['Seconds']
    }
    CreateBanResponse: {
      ban_id: components['schemas']['BanId']
      expires_at: components['schemas']['Timestamp']
    }
    CreateCourseRequest: {
      name: components['schemas']['CourseName']
      description?: components['schemas']['CourseDescription']
      mappers: components['schemas']['UserId'][]
      filters: components['schemas']['CreateFiltersRequest']
    }
    CreateFilterRequest: {
      nub_tier: components['schemas']['Tier']
      pro_tier: components['schemas']['Tier']
      ranked: boolean
      notes?: components['schemas']['FilterNotes']
    }
    CreateFiltersRequest:
      | {
          vnl: components['schemas']['CreateFilterRequest']
          ckz: components['schemas']['CreateFilterRequest']
        }
      | {
          kzt: components['schemas']['CreateFilterRequest']
          skz: components['schemas']['CreateFilterRequest']
          vnl: components['schemas']['CreateFilterRequest']
        }
    /** @example {
     *       "courses": [
     *         {
     *           "filters": {
     *             "cs2": {
     *               "ckz": {
     *                 "nub_tier": "easy",
     *                 "pro_tier": "medium",
     *                 "ranked": true
     *               },
     *               "vnl": {
     *                 "nub_tier": "medium",
     *                 "pro_tier": "advanced",
     *                 "ranked": true
     *               }
     *             }
     *           },
     *           "mappers": [
     *             "76561198260657129"
     *           ],
     *           "name": "Main"
     *         },
     *         {
     *           "filters": {
     *             "cs2": {
     *               "ckz": {
     *                 "nub_tier": "easy",
     *                 "pro_tier": "easy",
     *                 "ranked": true
     *               },
     *               "vnl": {
     *                 "nub_tier": "easy",
     *                 "pro_tier": "easy",
     *                 "ranked": true
     *               }
     *             }
     *           },
     *           "mappers": [
     *             "76561198260657129"
     *           ],
     *           "name": "Garden"
     *         },
     *         {
     *           "filters": {
     *             "ckz": {
     *               "nub_tier": "advanced",
     *               "pro_tier": "advanced",
     *               "ranked": true
     *             },
     *             "vnl": {
     *               "nub_tier": "hard",
     *               "pro_tier": "very-hard",
     *               "ranked": true
     *             }
     *           },
     *           "mappers": [
     *             "76561198260657129"
     *           ],
     *           "name": "word's backyard"
     *         },
     *         {
     *           "filters": {
     *             "ckz": {
     *               "nub_tier": "medium",
     *               "pro_tier": "advanced",
     *               "ranked": true
     *             },
     *             "vnl": {
     *               "nub_tier": "very-hard",
     *               "pro_tier": "death",
     *               "ranked": true
     *             }
     *           },
     *           "mappers": [
     *             "76561198260657129"
     *           ],
     *           "name": "Old grotto (hard)"
     *         }
     *       ],
     *       "description": "KZ but in a GROTTO! Make your way through an obstacle course based in a cave.",
     *       "workshop_id": 3121168339
     *     } */
    CreateMapRequest: {
      workshop_id: components['schemas']['WorkshopId']
      description?: components['schemas']['MapDescription']
      game: components['schemas']['Game']
      courses: components['schemas']['CreateCourseRequest'][]
    }
    CreateMapResponse: {
      map_id: components['schemas']['MapId']
    }
    CreateModePluginVersionRequest: {
      mode: components['schemas']['Mode']
      linux_checksum: components['schemas']['Checksum']
      windows_checksum: components['schemas']['Checksum']
    }
    CreatePluginVersionRequest: {
      /** @description A SemVer version */
      version: components['schemas']['PluginVersion']
      /** @description Which game this plugin is for */
      game: components['schemas']['Game']
      /** @description The git revision associated with the release commit / tag */
      git_revision: components['schemas']['GitRevision']
      /** @description Checksum of the plugin binary on Linux */
      linux_checksum: components['schemas']['Checksum']
      /** @description Checksum of the plugin binary on Windows */
      windows_checksum: components['schemas']['Checksum']
      /** @description Whether this release invalidates all previous releases */
      is_cutoff: boolean
      modes: components['schemas']['CreateModePluginVersionRequest'][]
      styles: components['schemas']['CreateStylePluginVersionRequest'][]
    }
    CreateServerRequest: {
      name: components['schemas']['ServerName']
      host: components['schemas']['ServerHost']
      port: components['schemas']['ServerPort']
      game: components['schemas']['Game']
    }
    CreateServerResponse: {
      server_id: components['schemas']['ServerId']
      access_key: components['schemas']['AccessKey']
    }
    CreateStylePluginVersionRequest: {
      style: components['schemas']['Style']
      linux_checksum: components['schemas']['Checksum']
      windows_checksum: components['schemas']['Checksum']
    }
    /** Format: email */
    EmailAddress: string
    /** @description An API event */
    Event:
      | {
          /**
           * Format: u-int64
           * @description The number of events that were skipped
           */
          skipped: number
        }
      | {
          /** @description The ID of the map */
          id: components['schemas']['MapId']
          /** @description The name of the map */
          name: components['schemas']['MapName']
        }
      | {
          /** @description The ID of the map */
          id: components['schemas']['MapId']
        }
      | {
          /** @description The ID of the server */
          id: components['schemas']['ServerId']
          /** @description Information about the connection */
          connection_info: components['schemas']['ConnectionInfo']
        }
      | {
          /** @description The ID of the server */
          id: components['schemas']['ServerId']
        }
      | {
          /** @description The ID of the server the player joined */
          server_id: components['schemas']['ServerId']
          /** @description The player that joined */
          player: components['schemas']['ConnectedPlayerInfo']
        }
      | {
          /** @description The ID of the server the player left */
          server_id: components['schemas']['ServerId']
          /** @description The ID of the player that left */
          player_id: components['schemas']['PlayerId']
        }
      | {
          /** @description The ID of the record */
          record_id: components['schemas']['RecordId']
        }
    Filter: {
      id: components['schemas']['FilterId']
      nub_tier: components['schemas']['Tier']
      pro_tier: components['schemas']['Tier']
      ranked: boolean
      notes: components['schemas']['FilterNotes']
    }
    /** Format: u-int16 */
    FilterId: number
    FilterNotes: string
    Filters:
      | {
          vnl: components['schemas']['Filter']
          ckz: components['schemas']['Filter']
        }
      | {
          kzt: components['schemas']['Filter']
          skz: components['schemas']['Filter']
          vnl: components['schemas']['Filter']
        }
    /**
     * @description The two games supported by the API
     * @enum {string}
     */
    Game: 'cs2' | 'csgo'
    /** @description a git revision */
    GitRevision: string
    /** @enum {string} */
    Leaderboard: 'nub' | 'pro'
    /**
     * Format: u-int64
     * @default 1000
     */
    Limit_1000_1000: number
    /**
     * Format: u-int64
     * @default 100
     */
    Limit_100_1000: number
    /**
     * Format: u-int64
     * @default 10
     */
    Limit_10_1000: number
    Map: {
      id: components['schemas']['MapId']
      workshop_id: components['schemas']['WorkshopId']
      name: components['schemas']['MapName']
      description: components['schemas']['MapDescription']
      game: components['schemas']['Game']
      state: components['schemas']['MapState']
      /** @description A checksum of the map's `.vpk` file */
      checksum: components['schemas']['Checksum']
      courses: components['schemas']['Course'][]
      created_by: components['schemas']['Mapper']
      created_at: components['schemas']['Timestamp']
    }
    /** @example Alpha's KZ */
    MapDescription: string
    /** Format: u-int16 */
    MapId: number
    MapInfo: {
      id: components['schemas']['MapId']
      name: components['schemas']['MapName']
    }
    /** @example kz_grotto */
    MapName: string
    /** @enum {string} */
    MapState: 'graveyard' | 'wip' | 'pending' | 'approved' | 'completed'
    Mapper: {
      id: components['schemas']['UserId']
      name: components['schemas']['Username']
    }
    /**
     * @description The different game modes across CS2 and CS:GO
     * @enum {string}
     */
    Mode: 'vanilla-cs2' | 'classic' | 'kztimer' | 'simplekz' | 'vanilla-csgo'
    /** Format: u-int64 */
    Offset: number
    PaginationResponse_Ban: {
      /** Format: u-int64 */
      total: number
      values: {
        id: components['schemas']['BanId']
        player: components['schemas']['BannedPlayer']
        reason: components['schemas']['BanReason']
        banned_by: components['schemas']['BannedBy']
        created_at: components['schemas']['Timestamp']
        expires_at: components['schemas']['Timestamp']
        unban?: null | components['schemas']['Unban']
      }[]
    }
    PaginationResponse_Map: {
      /** Format: u-int64 */
      total: number
      values: {
        id: components['schemas']['MapId']
        workshop_id: components['schemas']['WorkshopId']
        name: components['schemas']['MapName']
        description: components['schemas']['MapDescription']
        game: components['schemas']['Game']
        state: components['schemas']['MapState']
        /** @description A checksum of the map's `.vpk` file */
        checksum: components['schemas']['Checksum']
        courses: components['schemas']['Course'][]
        created_by: components['schemas']['Mapper']
        created_at: components['schemas']['Timestamp']
      }[]
    }
    PaginationResponse_Player: {
      /** Format: u-int64 */
      total: number
      values: {
        id: components['schemas']['PlayerId']
        name: components['schemas']['PlayerName']
        rating: components['schemas']['PlayerRating']
        created_at: components['schemas']['Timestamp']
      }[]
    }
    PaginationResponse_PluginVersionInfo: {
      /** Format: u-int64 */
      total: number
      values: {
        /** @description A SemVer version. */
        version: components['schemas']['PluginVersion']
        /** @description The git revision associated with the release commit / tag of this version. */
        git_revision: components['schemas']['GitRevision']
        /** @description When this version was published. */
        created_at: components['schemas']['Timestamp']
      }[]
    }
    PaginationResponse_Record: {
      /** Format: u-int64 */
      total: number
      values: {
        id: components['schemas']['RecordId']
        player: components['schemas']['PlayerInfo']
        map: components['schemas']['MapInfo']
        course: components['schemas']['CourseInfo']
        server: components['schemas']['ServerInfo']
        mode: components['schemas']['Mode']
        styles: components['schemas']['Styles']
        time: components['schemas']['Time']
        teleports: components['schemas']['Teleports']
        nub_points?: null | components['schemas']['Points']
        nub_rank?: null | components['schemas']['Rank']
        pro_points?: null | components['schemas']['Points']
        pro_rank?: null | components['schemas']['Rank']
        created_at: components['schemas']['Timestamp']
      }[]
    }
    PaginationResponse_Server: {
      /** Format: u-int64 */
      total: number
      values: {
        id: components['schemas']['ServerId']
        name: components['schemas']['ServerName']
        host: components['schemas']['ServerHost']
        port: components['schemas']['ServerPort']
        game: components['schemas']['Game']
        owner: components['schemas']['ServerOwner']
        is_global: boolean
        connection_info?: null | components['schemas']['ConnectionInfo']
        created_at: components['schemas']['Timestamp']
      }[]
    }
    PaginationResponse_User: {
      /** Format: u-int64 */
      total: number
      values: {
        id: components['schemas']['UserId']
        name: components['schemas']['Username']
        permissions: components['schemas']['Permissions']
        server_budget: components['schemas']['ServerBudget']
        created_at: components['schemas']['Timestamp']
      }[]
    }
    /** @enum {string} */
    Permission:
      | 'create-maps'
      | 'update-maps'
      | 'modify-server-metadata'
      | 'modify-server-budgets'
      | 'reset-server-access-keys'
      | 'delete-server-access-keys'
      | 'create-bans'
      | 'update-bans'
      | 'revert-bans'
      | 'grant-create-maps'
      | 'modify-user-permissions'
    /** @description A set of [`Permission`]s */
    Permissions: components['schemas']['Permission'][]
    Player: {
      id: components['schemas']['PlayerId']
      name: components['schemas']['PlayerName']
      rating: components['schemas']['PlayerRating']
      created_at: components['schemas']['Timestamp']
    }
    /**
     * Format: u-int64
     * @example STEAM_1:1:161178172
     */
    PlayerId: string
    PlayerInfo: {
      id: components['schemas']['PlayerId']
      name: components['schemas']['PlayerName']
    }
    /** @example AlphaKeks */
    PlayerName: string
    PlayerPreferences: Record<string, never>
    /** Format: double */
    PlayerRating: number
    /** @example 1.23.456-dev */
    PluginVersion: string
    PluginVersionInfo: {
      /** @description A SemVer version. */
      version: components['schemas']['PluginVersion']
      /** @description The git revision associated with the release commit / tag of this version. */
      git_revision: components['schemas']['GitRevision']
      /** @description When this version was published. */
      created_at: components['schemas']['Timestamp']
    }
    /** Format: double */
    Points: number
    /**
     * Format: rfc-9457
     * @description RFC 9457 - Problem Details for HTTP APIs
     */
    ProblemDetails: {
      /** @enum {string} */
      type:
        | 'https://docs.cs2kz.org/api/problems/invalid-path-parameters'
        | 'https://docs.cs2kz.org/api/problems/invalid-query-parameters'
        | 'https://docs.cs2kz.org/api/problems/missing-header'
        | 'https://docs.cs2kz.org/api/problems/invalid-header'
        | 'https://docs.cs2kz.org/api/problems/deserialize-request-body'
        | 'https://docs.cs2kz.org/api/problems/server-name-already-in-use'
        | 'https://docs.cs2kz.org/api/problems/server-host-and-port-already-in-use'
        | 'https://docs.cs2kz.org/api/problems/invalid-map-id'
        | 'https://docs.cs2kz.org/api/problems/invalid-map-name'
        | 'https://docs.cs2kz.org/api/problems/invalid-mapper-id'
        | 'https://docs.cs2kz.org/api/problems/invalid-mapper-name'
        | 'https://docs.cs2kz.org/api/problems/invalid-course-id'
        | 'https://docs.cs2kz.org/api/problems/map-is-frozen'
        | 'https://docs.cs2kz.org/api/problems/inconsistent-filters'
        | 'https://docs.cs2kz.org/api/problems/unknown-player-to-ban'
        | 'https://docs.cs2kz.org/api/problems/player-already-banned'
        | 'https://docs.cs2kz.org/api/problems/ban-expires-in-the-past'
        | 'https://docs.cs2kz.org/api/problems/ban-already-expired'
        | 'https://docs.cs2kz.org/api/problems/ban-already-reverted'
        | 'https://docs.cs2kz.org/api/problems/plugin-version-already-exists'
        | 'https://docs.cs2kz.org/api/problems/plugin-version-is-older-than-latest'
        | 'https://docs.cs2kz.org/api/problems/steam-api-error'
      /** Format: u-int16 */
      status: number
      title: string
      detail?: string
      instance?: string
    } & {
      [key: string]: unknown
    }
    /**
     * Format: u-int64
     * @description A 0-indexed position on a leaderboard
     */
    Rank: number
    RatingLeaderboard: components['schemas']['RatingLeaderboardEntry'][]
    RatingLeaderboardEntry: {
      id: components['schemas']['PlayerId']
      name: components['schemas']['PlayerName']
      rating: components['schemas']['PlayerRating']
    }
    Record: {
      id: components['schemas']['RecordId']
      player: components['schemas']['PlayerInfo']
      map: components['schemas']['MapInfo']
      course: components['schemas']['CourseInfo']
      server: components['schemas']['ServerInfo']
      mode: components['schemas']['Mode']
      styles: components['schemas']['Styles']
      time: components['schemas']['Time']
      teleports: components['schemas']['Teleports']
      nub_points?: null | components['schemas']['Points']
      nub_rank?: null | components['schemas']['Rank']
      pro_points?: null | components['schemas']['Points']
      pro_rank?: null | components['schemas']['Rank']
      created_at: components['schemas']['Timestamp']
    }
    /** Format: u-int32 */
    RecordId: number
    RecordsLeaderboard: components['schemas']['RecordsLeaderboardEntry'][]
    RecordsLeaderboardEntry: {
      id: components['schemas']['PlayerId']
      name: components['schemas']['PlayerName']
      /** Format: u-int64 */
      records: number
    }
    ResetServerAccessKeyResponse: {
      access_key: components['schemas']['AccessKey']
    }
    RevertBanRequest: {
      reason: components['schemas']['UnbanReason']
    }
    /**
     * Format: double
     * @description A duration in seconds
     */
    Seconds: number
    Server: {
      id: components['schemas']['ServerId']
      name: components['schemas']['ServerName']
      host: components['schemas']['ServerHost']
      port: components['schemas']['ServerPort']
      game: components['schemas']['Game']
      owner: components['schemas']['ServerOwner']
      is_global: boolean
      connection_info?: null | components['schemas']['ConnectionInfo']
      created_at: components['schemas']['Timestamp']
    }
    /**
     * Format: u-int16
     * @description A user's server budget
     *
     *     This indicates how many servers they are still allowed to create.
     */
    ServerBudget: number
    ServerHost: string
    /** Format: u-int16 */
    ServerId: number
    ServerInfo: {
      id: components['schemas']['ServerId']
      name: components['schemas']['ServerName']
    }
    /** @example Alpha's KZ */
    ServerName: string
    ServerOwner: {
      id: components['schemas']['UserId']
      name: components['schemas']['Username']
    }
    /**
     * Format: u-int16
     * @example 27015
     */
    ServerPort: number
    /** @enum {string} */
    Style: 'auto-bhop'
    /** @description A set of [`Style`]s */
    Styles: components['schemas']['Style'][]
    /** Format: u-int32 */
    Teleports: number
    /** @enum {string} */
    Tier:
      | 'very-easy'
      | 'easy'
      | 'medium'
      | 'advanced'
      | 'hard'
      | 'very-hard'
      | 'extreme'
      | 'death'
      | 'unfeasible'
      | 'impossible'
    Time: components['schemas']['Seconds']
    /** Format: date-time */
    Timestamp: string
    Unban: {
      reason: components['schemas']['UnbanReason']
      unbanned_by: components['schemas']['UserId']
      created_at: components['schemas']['Timestamp']
    }
    UnbanReason: string
    UpdateBanRequest: {
      reason?: null | components['schemas']['BanReason']
      expires_after?: null | components['schemas']['Seconds']
    }
    UpdateCourseRequest: {
      name?: null | components['schemas']['CourseName']
      description?: null | components['schemas']['CourseDescription']
      /** @description A list of SteamIDs to add as mappers */
      added_mappers?: components['schemas']['UserId'][]
      /** @description A list of SteamIDs to remove as mappers */
      removed_mappers?: components['schemas']['UserId'][]
      /** @description Updates to the course's filters */
      filter_updates?: {
        [key: string]: components['schemas']['UpdateFiltersRequest']
      }
    }
    UpdateFiltersRequest: {
      nub_tier?: null | components['schemas']['Tier']
      pro_tier?: null | components['schemas']['Tier']
      /** @description Whether the filter should contribute to player rating */
      ranked?: boolean | null
      notes?: null | components['schemas']['FilterNotes']
    }
    UpdateMapRequest: {
      /** @description The ID of the map on the Steam Workshop */
      workshop_id: components['schemas']['WorkshopId']
      description?: null | components['schemas']['MapDescription']
      /** @description Updates for the map's courses */
      course_updates?: {
        [key: string]: components['schemas']['UpdateCourseRequest']
      }
    }
    UpdateMapStateRequest: {
      state: components['schemas']['MapState']
    }
    UpdatePlayerPreferencesRequest: {
      game: components['schemas']['Game']
      preferences: components['schemas']['PlayerPreferences']
    }
    UpdateServerBudgetRequest: {
      budget: components['schemas']['ServerBudget']
    }
    UpdateServerRequest: {
      name?: null | components['schemas']['ServerName']
      host?: null | components['schemas']['ServerHost']
      port?: null | components['schemas']['ServerPort']
      game?: null | components['schemas']['Game']
    }
    UpdateUserEmailRequest: {
      email: components['schemas']['EmailAddress']
    }
    UpdateUserPermissionsRequest: {
      permissions: components['schemas']['Permissions']
    }
    User: {
      id: components['schemas']['UserId']
      name: components['schemas']['Username']
      permissions: components['schemas']['Permissions']
      server_budget: components['schemas']['ServerBudget']
      created_at: components['schemas']['Timestamp']
    }
    /**
     * Format: u-int64
     * @example 76561198282622073
     */
    UserId: string
    /** @example AlphaKeks */
    Username: string
    /** Format: u-int32 */
    WorkshopId: number
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  get_rating_leaderboard: {
    parameters: {
      query?: {
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_100_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RatingLeaderboard']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_records_leaderboard: {
    parameters: {
      query?: {
        /** @description Only count records for a specific mode */
        mode?: components['schemas']['Mode']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_100_1000']
      }
      header?: never
      path: {
        leaderboard: components['schemas']['Leaderboard']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RecordsLeaderboard']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_records: {
    parameters: {
      query?: {
        /** @description Only include records set by this player */
        player?: components['schemas']['PlayerId']
        /** @description Only include records set on this course */
        course?: components['schemas']['CourseId']
        /** @description Only include records set on this mode */
        mode?: components['schemas']['Mode']
        /** @description Only include records set on this server */
        server?: components['schemas']['ServerId']
        /** @description Only include records with this rank or lower */
        max_rank?: number
        /** @description Only include PBs */
        top?: boolean
        /** @description Only include PRO records */
        pro?: boolean
        /** @description Pagination offset */
        offset?: components['schemas']['Offset']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_100_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginationResponse_Record']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_record: {
    parameters: {
      query?: never
      header?: never
      path: {
        record_id: components['schemas']['RecordId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Record']
        }
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  create_map: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMapRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateMapResponse']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description map properties conflict with existing map(s) or are logically invalid */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_maps: {
    parameters: {
      query?: {
        /** @description Only include maps with a matching name
         *
         *     If this parameter is specified, the returned maps will be ordered by how
         *     close their actual name matches the given value. */
        name?: string
        /** @description Only include maps made for this game */
        game?: components['schemas']['Game']
        /** @description Only include maps in this state */
        state?: components['schemas']['MapState']
        /** @description Pagination offset */
        offset?: components['schemas']['Offset']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_1000_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginationResponse_Map']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_map: {
    parameters: {
      query?: never
      header?: never
      path: {
        map_id: components['schemas']['MapId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Map']
        }
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_map: {
    parameters: {
      query?: never
      header?: never
      path: {
        map_id: components['schemas']['MapId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMapRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description map properties conflict with existing map(s) or are logically invalid */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  update_map_state: {
    parameters: {
      query?: never
      header?: never
      path: {
        map_id: components['schemas']['MapId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMapStateRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description map properties conflict with existing map(s) or are logically invalid */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_servers: {
    parameters: {
      query?: {
        /** @description Only include servers with a matching name
         *
         *     If this parameter is specified, the returned servers will be ordered by
         *     how close their actual name matches the given value. */
        name?: string
        /** @description Only include servers with a matching hostname / IP */
        host?: string
        /** @description Only include servers for the specified game */
        game?: components['schemas']['Game']
        /** @description Only include servers owned by the specified user */
        owned_by?: components['schemas']['UserId']
        /** @description Include servers that currently don't have an API key */
        include_degloballed?: boolean
        /** @description Pagination offset */
        offset?: components['schemas']['Offset']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_100_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginationResponse_Server']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  create_server: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateServerRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateServerResponse']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description server properties conflict with existing server(s) */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_server: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: components['schemas']['ServerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Server']
        }
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_server: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: components['schemas']['ServerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateServerRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description server properties conflict with existing server(s) */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  reset_server_access_key: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: components['schemas']['ServerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResetServerAccessKeyResponse']
        }
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete_server_access_key: {
    parameters: {
      query?: never
      header?: never
      path: {
        server_id: components['schemas']['ServerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_bans: {
    parameters: {
      query?: {
        /** @description Only include bans for this player */
        player_id?: components['schemas']['PlayerId']
        /** @description Only include bans issued by this admin */
        banned_by?: components['schemas']['UserId']
        /** @description Pagination offset */
        offset?: components['schemas']['Offset']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_100_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginationResponse_Ban']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  create_ban: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBanRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateBanResponse']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description the player does not exist or is already banned */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_ban: {
    parameters: {
      query?: never
      header?: never
      path: {
        ban_id: components['schemas']['BanId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Ban']
        }
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  revert_ban: {
    parameters: {
      query?: never
      header?: never
      path: {
        ban_id: components['schemas']['BanId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RevertBanRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description the ban cannot be reverted */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  update_ban: {
    parameters: {
      query?: never
      header?: never
      path: {
        ban_id: components['schemas']['BanId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBanRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_players: {
    parameters: {
      query?: {
        /** @description Only include players with a matching name
         *
         *     If this parameter is specified, the returned players will be ordered by
         *     how close their actual name matches the given value. */
        name?: string
        /** @description Pagination offset */
        offset?: components['schemas']['Offset']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_100_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginationResponse_Player']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_player: {
    parameters: {
      query?: never
      header?: never
      path: {
        player_id: components['schemas']['PlayerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Player']
        }
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  get_player_preferences: {
    parameters: {
      query: {
        game: components['schemas']['Game']
      }
      header?: never
      path: {
        player_id: components['schemas']['PlayerId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PlayerPreferences']
        }
      }
      /** @description invalid path/query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_player_preferences: {
    parameters: {
      query?: never
      header?: never
      path: {
        player_id: components['schemas']['PlayerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlayerPreferencesRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_users: {
    parameters: {
      query?: {
        /** @description Only include users that have permissions */
        has_permissions?: boolean
        /** @description Only include users with *at least* these permissions */
        permissions?: components['schemas']['Permissions']
        /** @description Pagination offset */
        offset?: components['schemas']['Offset']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_100_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginationResponse_User']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  get_user: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: components['schemas']['UserId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['User']
        }
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_user_email: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: components['schemas']['UserId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserEmailRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  delete_user_email: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: components['schemas']['UserId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  update_user_permissions: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: components['schemas']['UserId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserPermissionsRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  update_user_server_budget: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: components['schemas']['UserId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateServerBudgetRequest']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  create_mapper: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: components['schemas']['UserId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  delete_mapper: {
    parameters: {
      query?: never
      header?: never
      path: {
        user_id: components['schemas']['UserId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description invalid path parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  web_login: {
    parameters: {
      query?: {
        /** @description The URL to return to after the login process is complete. */
        return_to?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description redirect to Steam's login page */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  web_logout: {
    parameters: {
      query?: {
        /** @description Whether to invalidate all your currently active sessions */
        invalidate_all?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description you are not logged in */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  events: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Event']
        }
      }
    }
  }
  get_plugin_versions: {
    parameters: {
      query?: {
        /** @description Only include plugin versions for the specified game */
        game?: components['schemas']['Game']
        /** @description Pagination offset */
        offset?: components['schemas']['Offset']
        /** @description Limit the number of results returned */
        limit?: components['schemas']['Limit_10_1000']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginationResponse_PluginVersionInfo']
        }
      }
      /** @description invalid query parameter(s) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
  create_plugin_version: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePluginVersionRequest']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
      /** @description invalid request body */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProblemDetails']
        }
      }
    }
  }
}
